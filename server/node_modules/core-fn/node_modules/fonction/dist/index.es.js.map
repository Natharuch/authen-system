{"version":3,"file":"index.es.js","sources":["../src/add.ts","../src/NN.ts","../src/ifElse.ts","../src/advance.ts","../src/and.ts","../src/append.ts","../src/lte.ts","../src/chunk.ts","../src/constants/index.ts","../src/N.ts","../src/constructorName.ts","../src/subtract.ts","../src/dec.ts","../src/or.ts","../src/defaultTo.ts","../src/divide.ts","../src/equal.ts","../src/F.ts","../src/flattenDeep.ts","../src/gt.ts","../src/gte.ts","../src/_/has.ts","../src/lt.ts","../src/take.ts","../src/head.ts","../src/tail.ts","../src/_/hasPath.ts","../src/has.ts","../src/identity.ts","../src/ifElseFn.ts","../src/inc.ts","../src/init.ts","../src/K.ts","../src/takeLast.ts","../src/last.ts","../src/multiply.ts","../src/not.ts","../src/pipe.ts","../src/prepend.ts","../src/product.ts","../src/props.ts","../src/_/prop.ts","../src/sum.ts","../src/T.ts","../src/tap.ts","../src/tryCatch.ts","../src/uniq.ts","../src/xor.ts"],"sourcesContent":["// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { add as _add } from '../deps.ts'\n\n// re-export\n\n/**\n * Adds first argument and second argument.\n *\n * @param a - The first input number\n * @param b - The second input number\n * @returns The result of `a + b`\n *\n * @example\n * ```ts\n * // Basic\n * add(1, 2) // 3\n * ```\n * @example\n * ```ts\n * // Bigint\n * add(1n, 2n) // 3n\n * ```\n *\n * @example\n * ```ts\n * // Curry\n * const plus2(2)\n * plus2(-3) // -1\n * ```\n *\n * @category `Math`\n *\n * @see Related to {@link subtract} {@link multiply} {@link divide}\n *\n * @public\n */\nexport const add = _add\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { FalsyLike } from './types/index.ts'\n/**\n * Abbreviation for Not Not. Returns the `!!` of its argument.\n *\n * @param val - Input any value\n * @returns The result of `!!val`\n *\n * @remarks\n * The Definition of Falsy\n * - `''`\n * - `false`\n * - `0`\n * - `NaN`\n * - `undefined`\n * - `null`\n *\n * @example\n * ```ts\n * NN('') // false\n * NN(false) // false\n * NN(0) // false\n * NN(NaN) // false\n * NN(undefined) // false\n * NN(null) // false\n *\n * NN({}) // true\n * NN([]) // true\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link N}\n *\n * @public\n */\nconst NN = <T>(val: T): T extends FalsyLike ? false : boolean =>\n  !!val as T extends FalsyLike ? false : boolean\nexport { NN }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isFunction } from '../deps.ts'\nimport { NN } from './NN.ts'\nimport { AnyFn } from './types/index.ts'\nimport { FalsyLike } from './types/index.ts'\n/**\n * Return the `onTrue` or the `onFalse` value depending upon the result of the condition `val`.\n *\n * @param val - A predicate value\n * @param onTrue - The `val` evaluates to a truthy value\n * @param onFalse - The `val` evaluates to a falsy value\n * @returns The result of `!!val` ? `onTrue` : `onFalse` (if argument is function, return value)\n *\n * @remarks\n * If you pass a function as an argument, return value will evaluate.\n *\n * @example\n * ```ts\n * ifElse(true, 1, 0) // 1\n * ifElse(false, 1, 0) // 0\n * ifElse(undefined, 1, 0) // 0\n * ifElse(() => true, () => 1, () => 0) // 1\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link ifElseFn}\n *\n * @public\n */\nconst ifElse = <V, T, F>(\n  val: V | AnyFn<any, V>,\n  onTrue: T | AnyFn<any, T>,\n  onFalse: F | AnyFn<any, F>\n): V extends FalsyLike ? F : V extends true ? T : T | F => {\n  const result = isFunction(val) ? NN(val()) : NN(val)\n  return result\n    ? isFunction(onTrue)\n      ? (onTrue() as V extends FalsyLike ? F : V extends true ? T : T | F)\n      : (onTrue as V extends FalsyLike ? F : V extends true ? T : T | F)\n    : isFunction(onFalse)\n    ? (onFalse() as V extends FalsyLike ? F : V extends true ? T : T | F)\n    : (onFalse as V extends FalsyLike ? F : V extends true ? T : T | F)\n}\n\nexport { ifElse }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isFunction } from '../deps.ts'\nimport { ifElse } from './ifElse.ts'\nimport { AnyFn } from './types/index.ts'\n/**\n * Returns return value if argument is `function`; otherwise returns the value as it is.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'function' ? val(): val`\n *\n * @example\n * ```ts\n * advance(1) // 1\n * advance(() => 1) // 1\n * ```\n *\n * @category `Logic`\n *\n * @public\n */\nconst advance = <T>(val: T | AnyFn<any, T>): T =>\n  ifElse(isFunction(val), () => (val as AnyFn<any, T>)(), val)\n\nexport { advance }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { advance } from './advance.ts'\nimport { ifElse } from './ifElse.ts'\nimport { NN } from './NN.ts'\nimport { FalsyLike } from './types/index.ts'\nimport { AnyFn } from './types/index.ts'\n/**\n * Returns `true` if both arguments are true; otherwise `false`.\n *\n * @param a - The first input any value\n * @param b - The second input any value\n * @returns The result of `!!a && !!bb` (if argument is function, return value)\n *\n * @remarks\n * If you pass a function as an argument, return value will evaluate.\n *\n * @example\n * ```ts\n * and(true, true) // true\n * and(false, true) // false\n * and(true, false) // false\n * and(false, false) // false\n * and(() => 1, () => 2) // true\n * and(() => 1, () => 0) // false\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link or} {@link xor}\n *\n * @public\n */\nconst and = <T, U>(\n  a: T | AnyFn<any, T>,\n  b: U | AnyFn<any, U>\n): T extends FalsyLike ? false : U extends FalsyLike ? false : boolean =>\n  ifElse(\n    NN(advance(a as unknown)),\n    () => NN(advance(b as unknown)) as any,\n    false\n  )\n\nexport { and }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Returns a new list containing the contents of the given list, followed by the given value.\n *\n * @param val - The value to add to the end of the new list\n * @param list - The list of elements to add a new item to\n * @returns The result of `[...list, val]`\n *\n * @example\n * ```ts\n * append('Tom', ['hello']) // ['hello', 'Tom']\n * append('Tom', []) // ['Tom']\n * append(['Tom'], ['hello', 'world']) // ['hello', 'world', ['Tom']]\n * ```\n *\n * @see Related to {@link prepend}\n *\n * @category `Array`\n *\n * @public\n */\nconst append = <T, U>(val: T, list: U[]): (T | U)[] => [...list, val]\nexport { append }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Ord } from './types/index.ts'\n\n/**\n * Returns `true` if the first argument is less than or equal to the second; otherwise `false`.\n *\n * @param a - The first input value\n * @param b - The second input value\n * @returns The result of `a <= b`\n *\n * @example\n * ```ts\n * // Number\n * lte(1, 2) // true\n * lte(2, 2) // true\n * lte(2, 1) // false\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * lte(1n, 2n) // true\n * lte(2n, 2n) // true\n * lte(2n, 1n) // true\n * ```\n *\n * @example\n * ```ts\n * // String\n * lte('a', 'z') // true\n * lte('a', 'a') // true\n * lte('z', 'a') // false\n * ```\n *\n * @example\n * ```ts\n * // Boolean\n * lte(true, true) // true\n * lte(false, false) // true\n * lte(false, true) // true\n * lte(true, false) // false\n * ```\n *\n * @example\n * ```ts\n * // Date\n * lte(new Date('2000/1/1'), new Date('2000/1/1')) // true\n * lte(new Date('1999/12/31'), new Date('2000/1/1')) // true\n * lte(new Date('2000/1/2'), new Date('2000/1/1')) // false\n * ```\n *\n * @see Related to {@link lt} {@link gt} {@link gte}\n *\n * @public\n */\nconst lte = <T extends Ord>(a: T, b: T): boolean => a <= b\n\nexport { lte }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { add } from './add.ts'\nimport { ifElse } from './ifElse.ts'\nimport { lte } from './lte.ts'\n/**\n * Return an array of elements split into groups the length of size.\n *\n * @param size - The length of each chunk\n * @param array - The array to process\n * @returns Returns the new array of chunks\n *\n * @remarks\n * If array can't be split evenly, the final chunk will be the remaining elements.\n *\n * @example\n * ```ts\n * // Basic\n * chunk(1, ['a', 'b', 'c', 'd']) // [['a'], ['b'], ['c'], ['d']]\n * chunk(3, ['a', 'b', 'c', 'd']) // [['a', 'b', 'c'], ['d']]\n * chunk(5, ['a', 'b', 'c', 'd']) // [['a', 'b', 'c', 'd']]\n * ```\n *\n * @example\n * ```ts\n * // Illegal size\n * chunk(0, ['a', 'b', 'c']) // ['a', 'b', 'c']\n * chunk(-3, ['a', 'b', 'c']) // ['a', 'b', 'c']\n * chunk(5, []) // []\n * ```\n *\n * @category `Array`\n *\n * @public\n */\nconst chunk = <T extends number, U extends readonly unknown[]>(\n  size: T,\n  array: U\n): T extends 0\n  ? U\n  : `${T}` extends `-${number}`\n  ? U\n  : U extends readonly []\n  ? U\n  : U extends readonly (infer R)[]\n  ? R[][]\n  : never =>\n  ifElse(\n    lte(size, 0 as T),\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    array as any,\n    () =>\n      array.reduce(\n        (acc, _, index) =>\n          ifElse(index % size, acc, [\n            ...(acc as never),\n            array.slice(index, add(index, size))\n          ]),\n        []\n      )\n  )\n\nexport { chunk }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nexport { _ } from 'https://x.nest.land/arithmetic4@0.1.1/mod.ts'\nexport const NULL = null\nexport const JSON_OBJECT = 'Object'\n\nconst { prototype } = Object\nconst { hasOwnProperty } = prototype\n\nexport { hasOwnProperty }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { FalsyLike } from './types/index.ts'\n/**\n * Returns the `!` of its argument.\n *\n * @param val - Input any value\n * @returns The result of `!val`\n *\n * @remarks\n * The Definition of Falsy\n * - `''`\n * - `false`\n * - `0`\n * - `NaN`\n * - `undefined`\n * - `null`\n *\n * @example\n * ```ts\n * N('') // true\n * N(false) // true\n * N(0) // true\n * N(NaN) // true\n * N(undefined) // true\n * N(null) // true\n *\n * N({}) // false\n * N([]) // false\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link NN}\n *\n * @public\n */\nconst N = <T>(val: T): T extends FalsyLike ? true : boolean =>\n  !val as T extends FalsyLike ? true : boolean\nexport { N }\n","import { isNil } from '../deps.ts'\nimport { and } from './and.ts'\nimport { ifElse } from './ifElse.ts'\nimport { N } from './N.ts'\n\n/**\n * Safe getter for `constructor.name`.\n * @param val - Any value\n * @returns If `val` is `null` or `undefined`, empty string; otherwise `constructor.name`\n *\n * @example\n * ```ts\n * constructorName(null) // ''\n * constructorName(undefined) // ''\n * constructorName({}) // 'Object'\n * constructorName('') // 'String'\n * ```\n *\n * @public\n */\nconst constructorName = (val: unknown): string =>\n  ifElse(\n    and(N(isNil(val)), () => (val as Record<string, unknown>).constructor),\n    () => (val as Record<string, unknown>).constructor.name ?? '',\n    ''\n  )\n\nexport { constructorName }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { subtract as _subtract } from '../deps.ts'\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { _ } from './constants/index.ts'\n\n// re-export\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @param a - The first input number\n * @param b - The second input number\n * @returns The result of `a - b`\n *\n * @remarks\n * Since subtraction is not idempotent, there are two ways to curry.\n *\n * @example\n * ```ts\n * // Number\n * subtract(2, 1) // 1\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * subtract(3n, 2n) //1n\n * ```\n *\n * @example\n * ```ts\n * // First argument curry\n * const from5Minus = subtract(5)\n * from5Minus(10) // -5\n * ```\n *\n * @example\n * ```ts\n * // Second argument curry\n * import { _ } from 'fonction'\n * const minus5 = (_, 5)\n * minus5(20) // 15\n * ```\n *\n * @category `Math`\n *\n * @see Related to {@link add} {@link multiply} {@link divide}\n *\n * @public\n */\nexport const subtract = _subtract\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isNumber } from '../deps.ts'\nimport { subtract } from './subtract.ts'\n\n/**\n * Decrements its argument.\n *\n * @param val - input `number` or `bigint`\n * @returns Decremented `val`\n *\n * @example\n * ```ts\n * dec(100) // 99\n * dec(10n) // 9n\n * ```\n *\n * @see Related to {@link inc}\n *\n * @public\n */\nconst dec: {\n  (val: number): number\n  (val: bigint): bigint\n} = (val: unknown) =>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (isNumber(val) ? subtract(val, 1) : subtract(val as bigint, 1n)) as any\n\nexport { dec }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { advance } from './advance.ts'\nimport { NN } from './NN.ts'\nimport { FalsyLike } from './types/index.ts'\nimport { AnyFn } from './types/index.ts'\n\n/**\n * Returns true if one or both of its arguments are true; otherwise false.\n *\n * @param a - The first input any value\n * @param b - The second input any value\n * @returns The result of `!!a || !!bb` (if argument is function, return value)\n *\n * @remarks\n * If you pass a function as an argument, return value will evaluate.\n\n * @example\n * ```ts\n * or(true, true) // true\n * or(false, true) // true\n * or(true, false) // true\n * or(false, false) // false\n *\n * or(() => 0, () => 1) // true\n * or(() => 0, () => 0) // false\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link and} {@link xor}\n *\n * @public\n */\nconst or = <T, U>(\n  a: T | AnyFn<any, T>,\n  b: U | AnyFn<any, U>\n): T extends FalsyLike ? (U extends FalsyLike ? false : boolean) : boolean =>\n  (NN(advance(a)) || NN(advance(b))) as T extends FalsyLike\n    ? U extends FalsyLike\n      ? false\n      : boolean\n    : boolean\nexport { or }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isNil } from '../deps.ts'\nimport { or } from './or.ts'\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`; otherwise the first argument is returned.\n *\n * @param a - `a` will be returned instead of `default`\n * @returns Returns a function that stores the default `a` value. The function accept `b` argument.\n * if `b` is `null`, `undefined` or `NaN`, return `a`; otherwise return `b`\n *\n * @example\n * ```ts\n * const defaultVal = defaultTo('anonymous')\n * defaultVal(undefined) // 'anonymous'\n * defaultVal(null) // 'anonymous'\n * defaultVal(NaN) // 'anonymous'\n *\n * defaultVal('Tom') // 'Tom'\n * ```\n *\n * @public\n */\nconst defaultTo =\n  <T extends unknown>(a: T) =>\n  <U extends unknown>(\n    b: U\n  ): U extends null | undefined ? T : U extends number ? U : T | U =>\n    (or(isNil(b), () => Number.isNaN(b)) ? a : b) as U extends null | undefined\n      ? T\n      : U extends number\n      ? U\n      : T | U\n\nexport { defaultTo }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { divide as _divide } from '../deps.ts'\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { _ } from './constants/index.ts'\n\n// re-export\n\n/**\n * Divide its second argument from its first argument.\n *\n * @param a - The first input number\n * @param b - The second input number\n * @returns The result of `a / b`\n\n * @remarks\n * Since division is not idempotent, there are two ways to curry.\n *\n * @example\n * ```ts\n * // Number\n * divide(10, 100) // 0.1\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * divide(1n, 2n) // 3n\n * ```\n *\n * @example\n * ```ts\n * // First argument curry\n * const reciprocal = divide(1)\n * reciprocal(4) // 0.25\n * ```\n *\n * @example\n * ```ts\n * // Second argument curry\n * import { _ } from 'fonction'\n * const half = divide(_, 2)\n * half(20) // 10\n * ```\n *\n * @category `Math`\n *\n * @see Related to {@link add} {@link subtract} {@link multiply}\n *\n * @public\n */\nexport const divide = _divide\n","import { equal as _equal } from '../deps.ts'\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles cyclical data structures.\n *\n * @param a - Input any value\n * @param b - Input any value\n * @returns Return `true` if the reference memory is the same or the property members and their values are the same\n *\n * @example\n * ```ts\n * equals(-0, 0) // true\n * equals(NaN, NaN) // true\n * equals([[[[]]]], [[[[]]]]) // true\n * equals({ a: { b: [1, 2, 3]}}, { a: { b: [1, 2, 3]}}) // true\n * ```\n *\n * @public\n */\nconst equal = _equal\n\nexport { equal }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { AnyFn } from './types/index.ts'\n\n/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @returns false\n *\n * @example\n * ```ts\n * F() // false\n * F(1, 'hello', 'world') // false\n * ```\n *\n * @see Related to {@link T}\n *\n * @public\n */\nconst F: AnyFn<unknown, false> = () => false\n\nexport { F }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Infer deep flatted array.\n *\n * @typeParam T - input any array\n * @returns Deep flatted array\n *\n * @example\n * ```ts\n * FlattenDeep<[]> // []\n * FlattenDeep<[[1, [2, [3, [4]], 5]]> // [1, 2, 3, 4, 5]\n * ```\n *\n * @category `Array`\n *\n * @public\n */\ntype FlattenDeep<T extends readonly unknown[]> = T extends readonly [\n  infer A,\n  ...infer Rest\n]\n  ? A extends readonly unknown[]\n    ? [...FlattenDeep<A>, ...FlattenDeep<Rest>]\n    : [A, ...FlattenDeep<Rest>]\n  : [...T]\n/**\n * Recursively flattens array.\n *\n * @param val - The `array` to flatten\n * @returns The result of `val.flat(Infinity)`\n *\n * @example\n * ```ts\n * flattenDeep([]) // []\n * flattenDeep([1, [2, [3, [4]], 5]]) // [1, 2, 3, 4, 5]\n * ```\n *\n * @public\n */\nconst flattenDeep = <T extends readonly unknown[]>(val: T): FlattenDeep<T> =>\n  val.flat(Infinity) as FlattenDeep<T>\n\nexport { flattenDeep }\nexport type { FlattenDeep }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Ord } from './types/index.ts'\n/**\n * Returns `true` if the first argument is greater than the second; otherwise `false`.\n *\n * @param a - The first input value\n * @param b - The second input value\n * @returns The result of `a > b`\n *\n * @example\n * ```ts\n * // Number\n * gt(2, 1) // true\n * gt(2, 2) // false\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * gt(2n, 1n) // true\n * gt(2n, 2n) // false\n * ```\n *\n * @example\n * ```ts\n * // String\n * gt('z', 'a') // true\n * gt('a', 'z') // false\n * ```\n *\n * @example\n * ```ts\n * // Boolean\n * gt(true, false) // true\n * gt(false, true) // false\n * gt(true, true) // false\n * gt(false, false) // false\n * ```\n *\n * @example\n * ```ts\n * // Date\n * gt(new Date('2000/1/2'), new Date('2000/1/1')) // true\n * gt(new Date('1999/12/31'), new Date('2000/1/1')) // false\n * gt(new Date('2000/1/1'), new Date('2000/1/1')) // false\n * ```\n *\n * @see Related to {@link gte} {@link lt} {@link lte}\n *\n * @public\n */\nconst gt = <T extends Ord>(a: T, b: T): boolean => a > b\n\nexport { gt }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Ord } from './types/index.ts'\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second; otherwise `false`.\n *\n * @param a - The first input value\n * @param b - The second input value\n * @returns The result of `a >= b`\n *\n * @example\n * ```ts\n * // Number\n * gte(2, 1) // true\n * gte(2, 2) // true\n * gte(2, 3) // false\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * gte(2n, 1n) // true\n * gte(2n, 2n) // true\n * gte(2n, 3n) // false\n * ```\n *\n * @example\n * ```ts\n * // String\n * gte('z', 'a') // true\n * gte('a', 'a') // true\n * gte('a', 'z') // false\n * ```\n *\n * @example\n * ```ts\n * // Boolean\n * gte(true, false) // true\n * gte(true, true) // true\n * gte(false, false) // true\n * gte(false, true) // false\n * ```\n *\n * @example\n * ```ts\n * // Date\n * gte(new Date('2000/1/2'), new Date('2000/1/1')) // true\n * gte(new Date('2000/1/1'), new Date('2000/1/1')) // true\n * gte(new Date('1999/12/31'), new Date('2000/1/1')) // false\n * ```\n *\n * @see Related to {@link gt} {@link lt} {@link lte}\n *\n * @public\n */\nconst gte = <T extends Ord>(a: T, b: T): boolean => a >= b\n\nexport { gte }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { hasOwnProperty } from '../constants/index.ts'\n\n/**\n * Returns whether or not an object has an own property with the specified name.\n *\n * @param props - The name of the property to check for\n * @param obj - The check object\n * @returns The result of `Object.prototype.hasOwnProperty.call(obj, props)`\n *\n * @example\n * ```ts\n * has('hello', { hello: 'world' }) // true\n * has(0, { 0 : 1}) // true\n * has('', {}) // false\n * has('hello', { hi : hello: 'world' }) // false\n * ```\n *\n * @internal\n */\nconst has = <T extends string | number, U extends Record<PropertyKey, unknown>>(\n  props: T,\n  obj: U\n): U extends Record<T, unknown> ? true : false =>\n  hasOwnProperty.call(obj, props) as U extends Record<T, unknown> ? true : false\n\nexport { has }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Ord } from './types/index.ts'\n\n/**\n * Returns `true` if the first argument is less than the second; otherwise `false`.\n *\n * @param a - The first input value\n * @param b - The second input value\n * @returns The result of `a < b`\n *\n * @example\n * ```ts\n * // Number\n * lt(1, 2) // true\n * lt(2, 2) // false\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * lt(1n, 2n) // true\n * lt(2n, 2n) // false\n * ```\n *\n * @example\n * ```ts\n * // String\n * lt('a', 'z') // true\n * lt('a', 'a') // false\n * ```\n *\n * @example\n * ```ts\n * // Boolean\n * lt(false, true) // true\n * lt(true, true) // false\n * lt(false, false) // false\n * lt(true, false) // false\n * ```\n *\n * @example\n * ```ts\n * // Date\n * lt(new Date('1999/12/31'), new Date('2000/1/1')) // true\n * lt(new Date('2000/1/1'), new Date('2000/1/1')) // false\n * lt(new Date('2000/1/2'), new Date('2000/1/1')) // false\n * ```\n *\n * @see Related to {@link lte} {@link gt} {@link gte}\n *\n * @public\n */\nconst lt = <T extends Ord>(a: T, b: T): boolean => a < b\n\nexport { lt }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\nimport { ifElse } from './ifElse.ts'\nimport { lt } from './lt.ts'\n\n/**\n * Return a slice of string or array with `n` elements taken from the beginning.\n *\n * @param howMany - The number of elements to take\n * @param val - `String` or `Array` to query\n * @returns The slice of array\n *\n * @example\n * ```ts\n * // String\n * take(3, 'hello') // 'hel'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * take(3, [1, 2, 3, 4]) // [1, 2, 3]\n * ```\n *\n * @category `String` `Array`\n *\n * @see Related to {@link slice} {@link takeLast}\n *\n * @public\n */\nconst take = <T extends readonly unknown[] | string>(\n  howMany: number,\n  val: T\n): T =>\n  ifElse(\n    lt(howMany, 0),\n    () => val.slice(howMany) as T,\n    () => val.slice(0, howMany) as T\n  )\n\nexport { take }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isArray, length } from '../deps.ts'\nimport { ifElse } from './ifElse.ts'\nimport { take } from './take.ts'\nimport { String2Array } from './types/index.ts'\n\n/**\n * Infer the head types.\n *\n * @typeParam T - `string` or any `array`\n * @returns Head element of the `T`\n *\n * @example\n * ```ts\n * // String\n * Head<string> // string\n * Head<''> // ''\n * Head<'hello'> // 'h'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * Head<[] | never[] | readonly [] | readonly never[]> // undefined\n * Head<['hello', 'world']> // 'hello'\n * Head<string | number[]> // string | number\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link Last}\n *\n * @public\n */\ntype Head<T extends readonly unknown[] | string> = T extends ''\n  ? ''\n  : T extends string\n  ? String2Array<T> extends []\n    ? string\n    : String2Array<T>[0]\n  : T extends readonly never[] | []\n  ? undefined\n  : T extends readonly [infer U, ...infer _]\n  ? U\n  : T[0] | undefined\n\n/**\n * Infer the head types.\n *\n * @typeParam T - `string` or any `array`\n * @returns Head element of the `T`\n *\n * @example\n * ```ts\n * // String\n * Head<string> // string\n * Head<''> // ''\n * Head<'hello'> // 'h'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * Head<[] | never[] | readonly [] | readonly never[]> // undefined\n * Head<['hello', 'world']> // 'hello'\n * Head<string | number[]> // string | number | undefined\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link Last}\n *\n * @public\n */\nconst head = <T extends readonly unknown[] | string>(val: T): Head<T> =>\n  ifElse(\n    isArray(val),\n    () =>\n      ifElse(\n        length(val as T & any[]),\n        () => take(1, val)[0] as Head<T>,\n        undefined as Head<T>\n      ),\n    () => take(1, val) as Head<T>\n  )\nexport { head }\nexport type { Head }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Returns all but the first element of the given list or string.\n *\n * @param val - string or any array object\n * @returns The result of `val.slice(1, Infinity)`\n *\n * @example\n * ```ts\n * // String\n * tail('hello') // 'ello'\n * tail('h') // ''\n * tail('') // ''\n * ```\n *\n * @example\n * ```ts\n * tail([1, 2, 3]) // [2, 3]\n * tail(['hello', 'world']) // ['world']\n * tail(['hello']) // []\n * tail([]) // []\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link head}\n *\n * @public\n */\nconst tail: {\n  (val: string): string\n  <T extends unknown[]>(val: T): T\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: any) => val.slice(1, Infinity)\n\nexport { tail }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isLength0, isObject, isUndefined } from '../../deps.ts'\nimport { and } from '../and.ts'\nimport { head } from '../head.ts'\nimport { ifElse } from '../ifElse.ts'\nimport { tail } from '../tail.ts'\nimport { has } from './has.ts'\n\n/**\n * Returns whether or not a path exists in an object. Only the object's own properties are checked.\n *\n * @param path - The path to use\n * @param obj - The object to check the path in\n * @returns Whether the path exists\n *\n * @example\n * ```ts\n * hasPath(['hello'], { hello: 'world' }) // true\n * hasPath([0], { 0: 1 }) // true\n * hasPath(['hello', 'world'], { hello: { world: '' } } // true\n *\n * hasPath(['hi'], { hello: '' } ) // false\n * hasPath(['hi', 'Tom'], { hi: { John: 1 } } ) // false\n * ```\n *\n * @internal\n */\n\n// TODO: Improve type inference\nconst hasPath = <T extends unknown>(\n  path: (string | number)[],\n  obj: Record<PropertyKey, T>\n): boolean => {\n  const key = head(path)\n  if (isUndefined(key)) return false\n  const rest = tail(path)\n  if (isLength0(rest)) {\n    return has(key, obj)\n  }\n  return ifElse(\n    and(has(key, obj), () => isObject(obj[key])),\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    () => hasPath(rest, obj[key] as any),\n    false\n  )\n}\n\nexport { hasPath }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isArray } from '../deps.ts'\nimport { has as _has } from './_/has.ts'\nimport { hasPath as _hasPath } from './_/hasPath.ts'\n\n/**\n * Returns whether or not an object has an own property with the specified name.\n *\n * @param props - The name of the property to check for\n * @param obj - The check object\n * @returns The result of `Object.prototype.hasOwnProperty`\n *\n * @example\n * ```ts\n * // Flat\n * has('hello', { hello: 'world' }) // true\n * has(0, { 0 : 1}) // true\n * has('', {}) // false\n * has('hello', { hi : hello: 'world' }) // false\n * ```\n *\n * @example\n * ```ts\n * // Nest\n * hasPath(['hello'], { hello: 'world' }) // true\n * hasPath([0], { 0: 1 }) // true\n * hasPath(['hello', 'world'], { hello: { world: '' } } // true\n *\n * hasPath(['hi'], { hello: '' } ) // false\n * hasPath(['hi', 'Tom'], { hi: { John: 1 } } ) // false\n * ```\n *\n * @category `Object`\n *\n * @see Related to {@link props}\n *\n * @public\n */\nconst has = <\n  T extends string | number | (string | number)[],\n  U extends Record<PropertyKey, unknown>\n>(\n  props: T,\n  obj: U\n): T extends unknown[]\n  ? boolean\n  : T extends string | number\n  ? U extends Record<T, unknown>\n    ? true\n    : false\n  : never =>\n  isArray(props)\n    ? _hasPath(props, obj)\n    : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (_has(props as string | number, obj) as any)\n\nexport { has }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Return the parameter supplied to it.\n *\n * @param val - The value to return\n * @returns The result of `val`\n *\n * @example\n * ```ts\n * identity(1) // 1\n * identity({}) // {}\n * ```\n *\n * @public\n */\nconst identity = <T>(val: T): T => val\n\nexport { identity }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isFunction } from '../deps.ts'\nimport { ifElse } from './ifElse.ts'\nimport { FalsyLike } from './types/index.ts'\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse` function depending upon the result of the condition predicate.\n *\n * @param condition - A predicate function\n * @param onTrue - Any value or A function to invoke when the `condition` evaluates to a truthy value\n * @param onFalse - Any value or A function to invoke when the `condition` evaluates to a falsy value\n * @returns A new function that will process either the `onTrue` or the `onFalse` function depending upon the result of the `condition` predicate\n *\n * @example\n * ```ts\n * ifElseFn((x: number) => x > 10, 'big', 'small')(20) // 'big'\n * const fn = ifElseFn((x: number) => x > 10, (x) => x + 1, (x) => x - 1)\n * fn(11) // 12\n * fn(9) // 8\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link ifElse}\n *\n * @public\n */\nconst ifElseFn =\n  <V, R, T, F>(\n    condition: (val: V) => R,\n    onTrue: T | ((val: V) => T),\n    onFalse: F | ((val: V) => F)\n  ) =>\n  (val: V): R extends true ? T : R extends FalsyLike ? F : T | F =>\n    ifElse(\n      condition(val),\n      () =>\n        ifElse(\n          isFunction(onTrue),\n          () => (onTrue as any)(val),\n          () => onTrue\n        ),\n      () =>\n        ifElse(\n          isFunction(onFalse),\n          () => (onFalse as any)(val),\n          () => onFalse\n        )\n    )\n\nexport { ifElseFn }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isNumber } from '../deps.ts'\nimport { add } from './add.ts'\n\n/**\n * Increments its argument.\n *\n * @param val - Input `number` or `bigint`\n * @returns Incremented `val`\n *\n * @example\n * ```ts\n * inc(100) // 101\n * inc(10n) // 11n\n * ```\n *\n * @see Related to {@link dec}\n *\n * @public\n */\nconst inc: {\n  (val: number): number\n  (val: bigint): bigint\n} = (val: unknown) =>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (isNumber(val) ? add(val, 1) : add(val as bigint, 1n)) as any\n\nexport { inc }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Returns all but the last element of the given list or string.\n *\n * @param val - string or any array object\n * @returns The result of `val.slice(0, -1)`\n *\n * @example\n * ```ts\n * // String\n * init('hello') // 'hell'\n * init('h') // ''\n * init('') // ''\n * ```\n *\n * @example\n * ```ts\n * init([1, 2, 3]) // [1, 2]\n * init(['hello', 'world']) // ['hello']\n * init(['hello']) // []\n * init([]) // []\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link tail}\n *\n * @public\n */\nconst init: {\n  (val: string): string\n  <T extends unknown[]>(val: T): T\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: any) => val.slice(0, -1)\n\nexport { init }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * K combinator. Returns a function that always returns the given value.\n *\n * @param val - The value to wrap in a function\n * @returns Function wrapped `val`\n *\n * @example\n * ```ts\n * const k = K('k')\n * k() // 'k'\n * ```\n *\n * @public\n */\nconst K = <T extends unknown>(val: T): (() => T) => (): T => val\n\nexport { K }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\nimport { ifElse } from './ifElse.ts'\nimport { lte } from './lte.ts'\n\n/**\n * Return a slice of string or array with `n` elements taken from the end.\n *\n * @param howMany - The number of elements to take\n * @param val - `String` or `Array` to query\n * @returns The slice of array\n *\n * @example\n * ```ts\n * // String\n * takeLast(3, 'hello') // 'llo'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * takeLast(3, [1, 2, 3, 4]) // [2, 3, 4]\n * ```\n *\n * @category `String` `Array`\n *\n * @see Related to {@link take}\n *\n * @public\n */\nconst takeLast = <T extends readonly unknown[] | string>(\n  howMany: number,\n  val: T\n): T =>\n  ifElse(\n    lte(howMany, 0),\n    () => val.slice(0, -howMany) as T,\n    () => val.slice(-howMany) as T\n  )\n\nexport { takeLast }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isArray, length } from '../deps.ts'\nimport { ifElse } from './ifElse.ts'\nimport { takeLast } from './takeLast.ts'\nimport { String2Array } from './types/index.ts'\n/**\n * Infer the last types.\n *\n * @typeParam T - `string` or any `array`\n *\n * @example\n * ```ts\n * // String\n * Last<string> // string\n * Last<''> // ''\n * Last<'hello'> // 'o'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * Last<[] | never[] | readonly [] | readonly never[]> // undefined\n * Last<['hello', 'world']> // 'world'\n * Last<string | number[]> // string | number\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link First}\n *\n * @public\n */\ntype Last<T extends string | readonly unknown[]> = T extends ''\n  ? ''\n  : T extends string\n  ? String2Array<T> extends []\n    ? string\n    : [never, ...String2Array<T>][String2Array<T>['length']]\n  : T extends never[] | []\n  ? undefined\n  : T extends readonly [...infer _, infer L]\n  ? L\n  : T[T['length']] | undefined\n\n/**\n * Returns the last element of the given list or string.\n *\n * @param val - `string` or any `array` object\n * @returns The last element of the `val`\n *\n * @example\n * ```ts\n * // String\n * last('hello') // 'o'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * last('hello', 'new', 'world') // 'world'\n * last([]) // undefined\n * last(['one', 2, 3, 4]) // 4\n * ```\n *\n * @see Related to {@link first}\n *\n * @public\n */\nconst last = <T extends string | readonly unknown[]>(val: T): Last<T> =>\n  ifElse(\n    isArray(val),\n    () =>\n      ifElse(\n        length(val as unknown as unknown[]),\n        () => takeLast(1, val)[0] as Last<T>,\n        undefined as Last<T>\n      ),\n    () => takeLast(1, val) as Last<T>\n  )\n\nexport { last }\nexport type { Last }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { multiply as _multiply } from '../deps.ts'\n\n// re-export\n\n/**\n * Multiplies first argument and second argument.\n *\n * @param a - The first input number\n * @param b - The second input number\n * @returns The result of `a * b`\n *\n * @example\n * ```ts\n * // Basic\n * multiply(2, 3) // 6\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * multiply(2n, 3n) // 6n\n * ```\n *\n * @example\n * ```ts\n * // Curry\n * const double = multiply(2)\n * double(4) // 8\n * ```\n *\n * @category `Math`\n *\n * @see Related to {@link add} {@link subtract} {@link divide}\n *\n * @public\n */\nexport const multiply = _multiply\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { N } from './N.ts'\nimport { AnyFn } from './types/index.ts'\n/**\n * Returns the function as is with return value `!`.\n *\n * @param val - Input any `function`\n * @returns The result is function what return value with `!`\n *\n * @example\n * ```ts\n * not(() => true)() // false\n * const gt10 = (val: number) => val > 10\n * not(gt10)(11) // false\n * ```\n *\n * @public\n */\n\nconst not =\n  <T extends AnyFn>(fn: T) =>\n  (...val: Parameters<T>): boolean =>\n    N(fn(...val))\n\nexport { not }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { AnyFn, Arity1Fn } from './types/index.ts'\n\n/**\n * Performs left-to-right function composition.\n *\n * @param functions - Multi any functions\n * @returns A `function` what argument is `function[0]` argument\n *\n * @remarks\n * The first argument may have any arity; the remaining arguments must be unary.\n *\n * @example\n * ```ts\n * const fn = pipe(add , inc)\n * fn(1, 1) // 3\n * ```\n *\n * @public\n */\nconst pipe: Pipe =\n  (...args: AnyFn[]) =>\n  (...initialArg: unknown[]) =>\n    args.reduce(\n      (acc, cur, index) => cur(...(index === 0 ? acc : [acc])) as unknown[],\n      initialArg\n    )\n\nexport { pipe }\n\ntype Pipe = {\n  <F1 extends AnyFn>(fn1: F1): (...initialArg: Parameters<F1>) => ReturnType<F1>\n\n  <F1 extends AnyFn, F2 extends Arity1Fn<ReturnType<F1>>>(...fn1: [F1, F2]): (\n    ...initialArg: Parameters<F1>\n  ) => ReturnType<F2>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>\n  >(\n    ...fn1: [F1, F2, F3]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F3>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>\n  >(\n    ...fn1: [F1, F2, F3, F4]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F4>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F5>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F6>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F7>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F8>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F9>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F10>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F11>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F12>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F13>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>,\n    F14 extends Arity1Fn<ReturnType<F13>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F14>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>,\n    F14 extends Arity1Fn<ReturnType<F13>>,\n    F15 extends Arity1Fn<ReturnType<F14>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F15>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>,\n    F14 extends Arity1Fn<ReturnType<F13>>,\n    F15 extends Arity1Fn<ReturnType<F14>>,\n    F16 extends Arity1Fn<ReturnType<F15>>\n  >(\n    ...fn1: [\n      F1,\n      F2,\n      F3,\n      F4,\n      F5,\n      F6,\n      F7,\n      F8,\n      F9,\n      F10,\n      F11,\n      F12,\n      F13,\n      F14,\n      F15,\n      F16\n    ]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F16>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>,\n    F14 extends Arity1Fn<ReturnType<F13>>,\n    F15 extends Arity1Fn<ReturnType<F14>>,\n    F16 extends Arity1Fn<ReturnType<F15>>,\n    F17 extends Arity1Fn<ReturnType<F16>>\n  >(\n    ...fn1: [\n      F1,\n      F2,\n      F3,\n      F4,\n      F5,\n      F6,\n      F7,\n      F8,\n      F9,\n      F10,\n      F11,\n      F12,\n      F13,\n      F14,\n      F15,\n      F16,\n      F17\n    ]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F17>\n}\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Returns a new list with the given value at the front, followed by the contents of the list.\n *\n * @param val - The value to add to the front of the new list\n * @param list - The list of elements to add a new item to\n * @returns The result of `[val, ...list]`\n *\n * @example\n * ```ts\n * prepend('Tom', ['hello']) // ['Tom', 'hello']\n * prepend('Tom', []) // ['Tom']\n * prepend(['Tom'], ['hello', 'world']) // [['Tom'], 'hello', 'world']\n * ```\n *\n * @category `Array`\n *\n * @see Related to {@link append}\n *\n * @public\n */\nconst prepend = <T, U>(val: T, list: U[]): (T | U)[] => [val, ...list]\nexport { prepend }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isNumber, isUndefined } from '../deps.ts'\nimport { head } from './head.ts'\nimport { ifElse } from './ifElse.ts'\nimport { multiply } from './multiply.ts'\n/**\n * Multiplies together all the elements of a list.\n *\n * @param val - list An array of numbers\n * @returns The product of all the numbers in the list\n *\n * @example\n * ```ts\n * product([1, 2, 3, 4, 5]) // 120\n * product([1n, 2n, 3n, 4n, 5n]) //120n\n * product([]) // 0\n * ```\n *\n * @category `Math`\n *\n * @public\n */\nconst product: {\n  (val: []): 0\n  (val: number[]): number\n  (val: bigint[]): bigint\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: any) => {\n  const _head = head(val) as number | bigint | undefined\n  return ifElse(isUndefined(_head), 0, () => {\n    const init = ifElse(isNumber(_head), 1, 1n)\n    return val.reduce(multiply, init)\n  })\n}\n\nexport { product }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { prop } from './_/prop.ts'\n\n/**\n * Returns a function that when supplied an object returns the indicated property of that object, if it exists.\n *\n * @param val - Input property key\n * @param obj - The object to query\n * @returns The result of safety `obj[val]` or `obj[val[0]][val[1]][val[...x]]`\n *\n * @example\n * ```ts\n * props('x', { x: 'hello' }) // 'hello'\n * props(1, { 1: 100 }) // 100\n * props('x', {}) // undefined\n * ```\n *\n * @category `Object`\n *\n * @see Related to {@link has}\n *\n * @public\n */\nconst props = <\n  T extends string | number,\n  U extends Record<PropertyKey, unknown>\n>(\n  val: T,\n  obj: U\n): U extends Record<T, unknown> ? U[T] : undefined => prop(val, obj)\nexport { props }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { has } from '../has.ts'\nimport { ifElse } from '../ifElse.ts'\n/**\n * Returns a function that when supplied an object returns the indicated property of that object, if it exists.\n *\n * @param val - input property key\n * @param obj - The object to query\n * @returns The result of safety `obj[val]`\n *\n * @example\n * ```ts\n * prop('x', { x: 'hello' }) // 'hello'\n * prop(1, { 1: 100 }) // 100\n * prop('x', {}) // undefined\n * ```\n *\n * @internal\n */\nconst prop = <\n  T extends string | number,\n  U extends Record<PropertyKey, unknown>\n>(\n  val: T,\n  obj: U\n): U extends Record<T, unknown> ? U[T] : undefined =>\n  ifElse(has(val, obj), () => obj[val], undefined) as U extends Record<\n    T,\n    unknown\n  >\n    ? U[T]\n    : undefined\nexport { prop }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isNumber, isUndefined } from '../deps.ts'\nimport { add } from './add.ts'\nimport { head } from './head.ts'\nimport { ifElse } from './ifElse.ts'\n/**\n * Adds together all the elements of a list.\n *\n * @param val - list An array of numbers\n * @returns The sum of all the numbers in the list\n *\n * @example\n * ```ts\n * sum([1, 2, 3, 4, 5]) // 15\n * sum([1n, 2n, 3n, 4n, 5n]) // 15n\n * sum([]) // 0\n * ```\n *\n * @category `Math`\n *\n * @public\n */\nconst sum: {\n  (val: []): 0\n  (val: number[]): number\n  (val: bigint[]): bigint\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: any) => {\n  const _head = head(val) as number | bigint | undefined\n  return ifElse(isUndefined(_head), 0, () => {\n    const init = ifElse(isNumber(_head), 0, 0n)\n    return val.reduce(add, init)\n  })\n}\n\nexport { sum }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { AnyFn } from './types/index.ts'\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @returns `True`\n *\n * @example\n * ```ts\n * T() // true\n * T(1, 'hello', 'world') // true\n * ```\n *\n * @see Related to {@link F}\n *\n * @public\n */\nconst T: AnyFn<unknown, true> = () => true\n\nexport { T }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Arity1Fn } from './types/index.ts'\n\n/**\n * Runs the given function with the supplied value, then returns the value.\n *\n * @param fn - The function to call with `val`. The return value of fn will be thrown away.\n * @returns The result of `(val) => fn(val)`\n *\n * @example\n * ```ts\n * tap(console.log)('hello') // hello\n * // log: hello\n * ```\n *\n * @public\n */\nconst tap =\n  <T>(fn: Arity1Fn<T>) =>\n  <R extends T>(val: R): R => {\n    fn(val)\n    return val\n  }\n\nexport { tap }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isFunction, isUndefined } from '../deps.ts'\nimport { advance } from './advance.ts'\nimport { ifElse } from './ifElse.ts'\nimport { N } from './N.ts'\nimport { AnyFn } from './types/index.ts'\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned function evaluates the `tryer`; if it does not throw, it simply returns the result. If the `tryer` does throw, the returned function evaluates the catcher function and returns its result.\n *\n * @param tryer - The function that may throw.\n * @param catcher - The function that will be evaluated if tryer throws.\n * @returns - The result of `try { tryer() } catch(e) { catcher(e) }`\n *\n * @example\n * ```ts\n * tryCatch(() => { throw Error('error') }) // Error('error')\n * tryCatch(() => { throw Error('error') }, 0) // 0\n * tryCatch(() => { throw Error('error') }, (e: Error) => e.message ) // 'error'\n * ```\n *\n * @category `Logic`\n *\n * @public\n */\nconst tryCatch = <R, E, P = unknown>(\n  tryer: AnyFn<any, R>,\n  catcher?: E | AnyFn<P, E>\n): R | E => {\n  try {\n    return advance(tryer)\n  } catch (e) {\n    return ifElse(\n      isFunction(catcher),\n      () => (catcher as AnyFn<P, E>)(e),\n      () => ifElse(N(isUndefined(catcher)), catcher, e)\n    )\n  }\n}\n\nexport { tryCatch }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { equal } from './equal.ts'\nimport { ifElse } from './ifElse.ts'\n\n/**\n * Returns a new `Array` containing only one copy of each element in the original array. `equal` is used to determine equality.\n *\n * @param val - Input any `array`\n * @returns The list of unique items\n *\n * @example\n * ```ts\n * uniq([1, 2, 1, 1]) // [1, 2]\n * uniq([{}, {}, [], []]) // [{}, []]\n * uniq([[1, 2, 3], [1, 2, 3]]) // [[1, 2, 3]]\n * ```\n *\n * @category `Array`\n *\n * @see Related to {@link equal}\n *\n * @public\n */\nconst uniq = <T extends unknown>(val: readonly T[]): T[] =>\n  Array.from(new Set(val)).reduce((acc, cur) => {\n    const result = acc.some((val) => equal(cur, val))\n    return ifElse(result, acc, () => [...acc, cur])\n  }, [] as T[])\n\nexport { uniq }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { advance } from './advance.ts'\nimport { N } from './N.ts'\nimport { FalsyLike } from './types/index.ts'\nimport { AnyFn } from './types/index.ts'\n\n/**\n * Returns true if one of the arguments is truthy and the other is falsy; otherwise false.\n *\n * @param a - The first input any value\n * @param b - The second input any value\n * @returns The result of `!a !== !b` (if argument is function, return value)\n *\n * @example\n * ```ts\n * xor(true, false) // true\n * xor(false, true) // true\n * xor(true, true) // false\n * xor(false, false) // false\n * xor(() => 1, () => 0) // true\n * xor(() => 0, () => 0) // false\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link and} {@link or}\n *\n * @public\n */\nconst xor = <T, U>(\n  a: T | AnyFn<any, T>,\n  b: U | AnyFn<any, U>\n): T extends FalsyLike ? (U extends FalsyLike ? false : boolean) : boolean =>\n  (N(advance(a)) !== (N(advance(b)) as unknown)) as T extends FalsyLike\n    ? U extends FalsyLike\n      ? false\n      : boolean\n    : boolean\nexport { xor }\n"],"names":["add","_add","NN","val","ifElse","onTrue","onFalse","isFunction","advance","and","a","b","append","list","lte","chunk","size","array","reduce","acc","_","index","slice","prototype","Object","hasOwnProperty","N","constructorName","isNil","constructor","name","subtract","_subtract","dec","isNumber","or","defaultTo","Number","isNaN","divide","_divide","equal","_equal","F","flattenDeep","flat","Infinity","gt","gte","has","props","obj","call","lt","take","howMany","head","isArray","length","undefined","tail","hasPath","path","key","isUndefined","rest","isLength0","isObject","_hasPath","_has","identity","ifElseFn","condition","inc","init","K","takeLast","last","multiply","_multiply","not","fn","pipe","args","initialArg","cur","prepend","product","_head","prop","sum","T","tap","tryCatch","tryer","catcher","e","uniq","Array","from","Set","result","some","xor"],"mappings":"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"}