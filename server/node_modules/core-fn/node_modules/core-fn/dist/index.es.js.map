{"version":3,"file":"index.es.js","sources":["../string/replace.ts","../string/starts_with.ts","../string/ends_with.ts","../string/trim.ts","../string/trim_start.ts","../string/trim_left.ts","../string/trim_end.ts","../string/trim_right.ts","../string/to_lower_case.ts","../string/to_upper_case.ts","../string/repeat.ts","../string/match.ts","../common/length.ts","../regexp/test.ts","../regexp/exec.ts","../regexp/dot_all.ts","../regexp/unicode.ts","../regexp/ignore_case.ts","../regexp/flags.ts","../regexp/global.ts","../regexp/sticky.ts","../regexp/multiline.ts","../regexp/source.ts","../regexp/last_index.ts"],"sourcesContent":["// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\nimport { curry } from \"../deps.ts\";\n/**\n * Infer the replacement value.\n *\n * @typeParam T - Original string\n * @typeParam From - Holds the pattern string that need to replace or RegExp\n * @typeParam To - Holds the replacement string\n *\n * @example\n * ```ts\n * Replace<'hello Tom', 'Tom', 'Bob'> // 'hello Bob'\n * Replace<'hogehoge', 'hoge', 'fuga'> // 'fugahoge'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\ntype Replace<\n  T extends string,\n  From extends string | RegExp,\n  To extends string,\n> = From extends \"\" | To ? T\n  : From extends string\n    ? T extends `${infer L}${From}${infer R}` ? `${L}${To}${R}`\n    : T\n  : From extends RegExp ? string\n  : never;\n\n/**\n * @internal\n */\nconst _replace = <\n  From extends string | RegExp,\n  To extends string,\n  T extends string,\n>(\n  from: From,\n  to: To,\n  val: T,\n): Replace<T, From, To> => val.replace(from, to) as Replace<T, From, To>;\n\n/**\n* Replaces matches for `from` in string or RegExp with `to`.\n*\n* @param from - Holds the pattern string that need to replace or RegExp\n* @param to - Holds the replacement string\n* @param val - Original string\n* @returns The result of `val.replace(from, to)`\n*\n* @example\n* ```ts\n* replace('hello Tom', 'Tom', 'Bob') // 'hello Bob'\n* replace('hogehoge', 'hoge', 'fuga') // 'fugahoge'\n* ```\n*\n* @category `String`\n*\n* @beta\n*/\nconst replace = curry(_replace);\n\nexport { _replace, replace };\nexport type { Replace };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { curry } from \"../deps.ts\";\n\n/**\n * @internal\n */\nconst _startsWith = <T extends string, U extends string>(\n  val: T,\n  target: U,\n): boolean => target.startsWith(val);\n\n/**\n * Checks if a string starts with the provided substring.\n *\n * @param val - search string\n * @param target - target string\n * @returns The result of `target.startsWith(val)`\n *\n * @example\n * ```ts\n * // Basic\n * startsWith('hello', 'hello world') // true\n * startsWith('good', 'hello world') // false\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst startsWith = curry(_startsWith);\n\nexport { _startsWith, startsWith };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { curry } from \"../deps.ts\";\n\n/**\n * @internal\n */\nconst _endsWith = <T extends string, U extends string>(\n  val: T,\n  target: U,\n): boolean => target.endsWith(val);\n\n/**\n * Checks if a string ends with the provided substring.\n *\n * @param val - Search string\n * @param target - Target string\n * @returns The result of `target.endsWith(val)`\n *\n * @example\n * ```ts\n * // Basic\n * endsWith('world', 'hello world') // true\n * endsWith('earth', 'hello world') // false\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst endsWith = curry(_endsWith);\n\nexport { _endsWith, endsWith };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { TrimStart } from \"./trim_start.ts\";\nimport { TrimEnd } from \"./trim_end.ts\";\n\n/**\n * Infer the trimmed string.\n *\n * @typeParam T - Any string\n * @returns Trimmed string\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * Trim<'\\t\\n hello \\t\\n'> // 'hello'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\ntype Trim<T extends string> = TrimStart<TrimEnd<T>>;\n\n/**\n * Removes whitespace from both ends of the string.\n *\n * @param val - `string` to trim\n * @returns The result of `val.trim()`\n *\n * @example\n * ```ts\n * trim('   hello   ') // 'hello'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst trim = <T extends string>(val: T): Trim<T> => val.trim() as Trim<T>;\n\nexport { trim };\nexport type { Trim };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { Space } from \"../deps.ts\";\n\n/**\n * Infer the string with the left ends of trimmed.\n *\n * @returns String left ends of trimmed\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * TrimStart<' \\n\\thello'> // 'hello'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\ntype TrimStart<T extends string> = T extends `${Space}${infer R}` ? TrimStart<R>\n  : T;\n\n/**\n * Removes the leading white space and line terminator characters from a string.\n *\n * @param val - input string\n * @returns The result of `val.trimStart()`\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * trimStart('   hello') // 'hello'\n * trimStart(' \\n\\thello') // 'hello'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst trimStart = <T extends string>(val: T): TrimStart<T> =>\n  val.trimStart() as TrimStart<T>;\n\nexport { trimStart };\nexport type { TrimStart };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { trimStart } from \"./trim_start.ts\";\n\n/**\n * Removes space from left ends of the string.\n *\n * @param val - input string\n * @returns The result of `val.trimLeft()`\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * trimLeft('   hello') // 'hello'\n * trimLeft(' \\n\\thello') // 'hello'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst trimLeft = trimStart;\n\nexport { trimLeft };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { Space } from \"../deps.ts\";\n\n/**\n * Infer the string with the right ends of trimmed.\n *\n * @typeParam T - Any string\n * @returns String right ends of trimmed\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * TrimEnd<'hello \\n\\t'> // 'hello'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\ntype TrimEnd<T extends string> = T extends `${infer R}${Space}` ? TrimEnd<R>\n  : T;\n\n/**\n * Removes the trailing white space and line terminator characters from a string.\n *\n * @param val - input string\n * @returns The result of `val.trimEnd()`\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * trimEnd('hello   ') // 'hello'\n * trimEnd('hello \\n\\t') // 'hello'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst trimEnd = <T extends string>(val: T): TrimEnd<T> =>\n  val.trimEnd() as TrimEnd<T>;\n\nexport { trimEnd };\nexport type { TrimEnd };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { trimEnd } from \"./trim_end.ts\";\n\n/**\n * Removes space from right ends of the string.\n *\n * @param val - input string\n * @returns The result of `val.trimRight()`\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * trimRight('hello   ') // 'hello'\n * trimRight('hello \\n\\t') // 'hello'\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst trimRight = trimEnd;\n\nexport { trimRight };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n/**\n * Return lowercase string.\n *\n * @param val - Input string value\n * @returns Lowercase string\n *\n * @example\n * ```ts\n * toLowerCase('Hello') // hello\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst toLowerCase = <T extends string>(val: T): Lowercase<T> =>\n  val.toLowerCase() as Lowercase<T>;\n\nexport { toLowerCase };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n/**\n * Return uppercase string.\n *\n * @param val - Input string value\n * @returns Uppercase string\n *\n * @example\n * ```ts\n * toUpperCase('Hello') // HELLO\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst toUpperCase = <T extends string>(val: T): Uppercase<T> =>\n  val.toUpperCase() as Uppercase<T>;\n\nexport { toUpperCase };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { curry, tryCatch } from \"../deps.ts\";\n\nconst _repeat = (count: number, val: string): string =>\n  tryCatch(() => val.repeat(count), \"\");\n\n/**\n * Returns a String value that is made from count copies appended together. If count is 0,\n * the empty string is returned.\n * @param count - Number of copies to append\n * @param val - Any string\n * @returns The result of `val.repeat(count)`\n *\n * @remarks\n * No exception will be thrown. If `RangeError` is raised, return `''`.\n *\n * @example\n * ```ts\n * repeat(0, 'abc') // ''\n * repeat(2, 'abc') // 'abcabc'\n * ```\n *\n * @example\n * ```ts\n * // RangeError\n * repeat(-1, 'abc') // ''\n * repeat(Infinity, 'abc') // ''\n * ```\n *\n * @category `String`\n *\n * @beta\n */\nconst repeat = curry(_repeat);\n\nexport { _repeat, repeat };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { curry } from \"../deps.ts\";\n\n/**\n * @internal\n */\nconst _match = (\n  matcher: string | RegExp,\n  val: string,\n): RegExpMatchArray | null => val.match(matcher);\n\n/**\n * Matches a string with a regular expression, and returns an array containing the results of that search.\n * @param matcher - `RegExp` a variable name or string literal containing the regular expression pattern and flags\n * @param val - Any `String`\n * @returns The result of `val.match(matcher)`\n *\n * @example\n * ```ts\n * match(/xyz/, 'vwxyz') // ['xyz']\n * ```\n *\n * @beta\n */\nconst match = curry(_match);\n\nexport { _match, match };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n/**\n * Returns length property.\n *\n * @param val - Value with length property\n * @returns The result of `val.length`\n *\n * @example\n * ```ts\n * length('hello') // 5\n * length(['hello', 'world', 1]) // 3\n * length({length: 5, text: 'hello'}) // 5\n * ```\n *\n * @beta\n */\nconst length = <T extends { length: number }>(val: T): T[\"length\"] =>\n  val.length;\n\nexport { length };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { curry } from \"../deps.ts\";\n\nconst _test = (regExp: RegExp, val: string): boolean => regExp.test(val);\n\n/**\n * whether a given `string` matches a given regular expression.\n *\n * @param regExp - Any Regular expression\n * @param val - Any `string` value\n * @returns The result of `regExp.test(val)`\n *\n * @example\n * ```ts\n * test(new RegExp('^test'), 'testdata') // true\n * test(/xyz$/, 'testxyz') // true\n * ```\n *\n * @category `RegExp`\n *\n * @beta\n */\nconst test = curry(_test);\n\nexport { _test, test };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\nimport { curry } from \"../deps.ts\";\n\n/**\n * @internal\n */\nconst _exec = (regExp: RegExp, val: string) => regExp.exec(val);\n\n/**\n * Executes a search on a `string` using a regular expression pattern, and returns an `array` containing the results of that search.\n * @param regExp - Any `RegExp`\n * @param val - Any `String`\n * @returns The result of `regExp.exec(val)`\n *\n * @example\n * ```ts\n * exec(/^test/, 'test-data') // ['test']\n * ```\n *\n * @beta\n */\nconst exec = curry(_exec);\n\nexport { _exec, exec };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression. Default is false. Read-only.\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.dotAll`\n *\n * @example\n * ```ts\n * dotAll(/test/s) // true\n * dotAll(/test/) // false\n * ```\n *\n * @beta\n */\nconst dotAll = (regExp: RegExp) => regExp.dotAll;\n\nexport { dotAll };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular expression. Default is false. Read-only.\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.unicode`\n *\n * @example\n * ```ts\n * dotAll(/test/u) // true\n * dotAll(/test/) // false\n * ```\n *\n * @beta\n */\nconst unicode = (regExp: RegExp) => regExp.unicode;\n\nexport { unicode };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only.\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.ignoreCase`\n *\n * @example\n * ```ts\n * ignoreCase(/test/s) // true\n * ignoreCase(/test/) // false\n * ```\n *\n * @beta\n */\nconst ignoreCase = (regExp: RegExp) => regExp.ignoreCase;\n\nexport { ignoreCase };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns a string indicating the flags of the regular expression in question. This field is read-only. The characters in this string are sequenced and concatenated in the following order:\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.flags`\n *\n * @remarks\n * - \"g\" for global\n * - \"i\" for ignoreCase\n * - \"m\" for multiline\n * - \"u\" for unicode\n * - \"y\" for sticky\n *\n * If no flags are set, the value is the empty string.\n *\n * @example\n * ```ts\n * flags(/test/s) // true\n * flags(/test/) // false\n * ```\n *\n * @beta\n */\nconst flags = (regExp: RegExp) => regExp.flags;\n\nexport { flags };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only.\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.global`\n *\n * @example\n * ```ts\n * global(/test/g) // true\n * global(/test/) // false\n * ```\n *\n * @beta\n */\nconst global = (regExp: RegExp) => regExp.global;\n\nexport { global };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular expression. Default is false. Read-only.\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.sticky`\n *\n * @example\n * ```ts\n * sticky(/test/y) // true\n * sticky(/test/) // false\n * ```\n *\n * @beta\n */\nconst sticky = (regExp: RegExp) => regExp.sticky;\n\nexport { sticky };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only.\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.multiline`\n *\n * @example\n * ```ts\n * multiline(/test/y) // true\n * multiline(/test/) // false\n * ```\n *\n * @beta\n */\nconst multiline = (regExp: RegExp) => regExp.multiline;\n\nexport { multiline };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal.\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.source`\n *\n * @example\n * ```ts\n * source(/test/s) // true\n * source(/test/) // false\n * ```\n *\n * @beta\n */\nconst source = (regExp: RegExp) => regExp.source;\n\nexport { source };\n","// Copyright 2021-present the Core-fn authors. All rights reserved. MIT license.\n\n/**\n * Returns read/write integer property of `RegExp` instances that specifies the index at which to start the next match.\n * @param regExp - Any `RegExp`\n * @returns The result of `regExp.lastIndex`\n *\n * @example\n * ```ts\n * const re = /t/g;\n * exec(re, \"test\");\n * lastIndex(re) // 1\n * ```\n *\n * @beta\n */\nconst lastIndex = (regExp: RegExp) => regExp.lastIndex;\n\nexport { lastIndex };\n"],"names":["replace","curry","from","to","val","startsWith","target","endsWith","trim","trimStart","trimLeft","trimEnd","trimRight","toLowerCase","toUpperCase","repeat","count","tryCatch","match","matcher","length","test","regExp","exec","dotAll","unicode","ignoreCase","flags","global","sticky","multiline","source","lastIndex"],"mappings":";uEAkCA,MA4BMA,EAAUC,GA5BC,CAKfC,EACAC,EACAC,IACyBA,EAAIJ,QAAQE,EAAMC,KCbvCE,EAAaJ,GAvBC,CAClBG,EACAE,IACYA,EAAOD,WAAWD,KCoB1BG,EAAWN,GAvBC,CAChBG,EACAE,IACYA,EAAOC,SAASH,KCiCxBI,EAA0BJ,GAAoBA,EAAII,OCMlDC,EAA+BL,GACnCA,EAAIK,YCxBAC,EAAWD,ECwBXE,EAA6BP,GACjCA,EAAIO,UCzBAC,EAAYD,ECTZE,EAAiCT,GACrCA,EAAIS,cCDAC,EAAiCV,GACrCA,EAAIU,cCgBAC,EAASd,GA9BC,CAACe,EAAeZ,IAC9Ba,GAAS,IAAMb,EAAIW,OAAOC,IAAQ,MCoB9BE,EAAQjB,GAlBC,CACbkB,EACAf,IAC4BA,EAAIc,MAAMC,KCOlCC,EAAwChB,GAC5CA,EAAIgB,OCKAC,EAAOpB,GAnBC,CAACqB,EAAgBlB,IAAyBkB,EAAOD,KAAKjB,KCkB9DmB,EAAOtB,GAfC,CAACqB,EAAgBlB,IAAgBkB,EAAOC,KAAKnB,KCSrDoB,EAAUF,GAAmBA,EAAOE,OCApCC,EAAWH,GAAmBA,EAAOG,QCArCC,EAAcJ,GAAmBA,EAAOI,WCSxCC,EAASL,GAAmBA,EAAOK,MCTnCC,EAAUN,GAAmBA,EAAOM,OCApCC,EAAUP,GAAmBA,EAAOO,OCApCC,EAAaR,GAAmBA,EAAOQ,UCAvCC,EAAUT,GAAmBA,EAAOS,OCCpCC,EAAaV,GAAmBA,EAAOU"}