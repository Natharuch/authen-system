{"version":3,"file":"index.umd.js","sources":["../node_modules/curry-rice/dist/index.es.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/lauqe/dist/index.es.js","../node_modules/arithmetic4/dist/index.es.js","../src/add.ts","../src/isFunction.ts","../src/NN.ts","../src/ifElse.ts","../src/advance.ts","../src/and.ts","../src/lte.ts","../src/slice.ts","../src/constants/index.ts","../src/isNull.ts","../src/isUndefined.ts","../src/or.ts","../src/isNil.ts","../src/N.ts","../src/constructorName.ts","../src/isNumber.ts","../src/subtract.ts","../src/isNaN.ts","../src/divide.ts","../src/isString.ts","../src/entries.ts","../src/equal.ts","../src/isArray.ts","../src/length.ts","../src/lt.ts","../src/take.ts","../src/first.ts","../src/_/has.ts","../src/isLength0.ts","../src/isBigint.ts","../src/isBoolean.ts","../src/isNill.ts","../src/isSymbol.ts","../src/isPrimitive.ts","../src/isObject.ts","../src/tail.ts","../src/_/hasPath.ts","../src/has.ts","../src/hasPath.ts","../src/includes.ts","../src/keys.ts","../src/takeLast.ts","../src/multiply.ts","../src/test.ts","../src/F.ts","../src/K.ts","../src/T.ts","../src/append.ts","../src/chunk.ts","../src/dec.ts","../src/defaultTo.ts","../src/endsWith.ts","../src/flattenDeep.ts","../src/gt.ts","../src/gte.ts","../src/head.ts","../src/identity.ts","../src/ifElseFn.ts","../src/inc.ts","../src/isEmpty.ts","../src/isJSONObject.ts","../src/last.ts","../src/lowerCase.ts","../src/map.ts","../src/_/mapArray.ts","../src/_/mapObject.ts","../src/not.ts","../src/pipe.ts","../src/prepend.ts","../src/product.ts","../src/props.ts","../src/_/prop.ts","../src/replace.ts","../src/replaceAll.ts","../src/reverse.ts","../src/startsWith.ts","../src/sum.ts","../src/tap.ts","../src/trim.ts","../src/trimLeft.ts","../src/trimRight.ts","../src/tryCatch.ts","../src/uniq.ts","../src/upperCase.ts","../src/values.ts","../src/xor.ts"],"sourcesContent":["/*! Copyright (c) 2021-present the Curry authors. All rights reserved. MIT license. */\nconst n=n=>{const t=(...e)=>e.length>=n.length?n(...e):t.bind(null,...e);return t};export{n as curry};\n//# sourceMappingURL=index.es.js.map\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","/*! Copyright (c) 2021-present the Equal authors. All rights reserved. MIT license. */\nimport{and as r,isFunction as e,isJSONObject as t,isPrimitive as n,isObject as o,N as a,isArray as i,constructorName as s,or as y,ifElse as g,length as m,entries as f,has as A}from\"fonction\";const c=e=>(t,n)=>r(e(t),(()=>e(n))),u=e=>(t,n)=>r(t instanceof e,(()=>n instanceof e)),S=c(i),E=c(e),l=c(t),p=c(n),U=c((e=>r(o(e),(()=>a(t(e)))))),v=u(Date),R=u(RegExp),b=u(Error),I=u(Map),B=u(Set),L=u(URL),O=u(ArrayBuffer),h=u(URLSearchParams),x=(r,e)=>[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array].some((t=>u(t)(r,e))),{is:T,getOwnPropertySymbols:z}=Object,F=r=>z(r).map((e=>[e,r[e]])),P=(r,e)=>e instanceof r,d=(r,e)=>{if(!j(r,e))return!1;const t=[[p,w],[l,K],[S,V],[v,M],[E,k],[R,D],[b,N],[I,q],[B,G],[x,W],[O,X],[L,Y],[h,Z],[U,Q]];for(const[n,o]of t)if(n(r,e))return o(r,e);return!1},j=(r,e)=>s(r)===s(e),w=(r,e)=>y(T(r,e),(()=>r===e)),C=(e,t,n)=>r(P(e,t),(()=>P(e,n))),D=(r,e)=>r.toString()===e.toString(),M=(r,e)=>w(r.getTime(),e.getTime()),N=(r,e)=>{if(r.message!==e.message)return!1;return!![EvalError,RangeError,ReferenceError,SyntaxError,TypeError,URIError].some((t=>C(t,r,e)))||g(C(AggregateError,r,e),(()=>V(r.errors,e.errors)),(()=>j(r,e)))},k=(r,e)=>r.toString()===e.toString(),q=(r,e)=>r.size===e.size&&J([...r],[...e]),G=(r,e)=>V([...r],[...e]),H=([e,t],[n,o])=>r(d(e,n),(()=>d(t,o))),J=(e,t)=>m(e)===m(t)&&r(e.every((r=>t.some((e=>H(r,e))))),(()=>t.every((r=>e.some((e=>H(e,r))))))),K=(e,t)=>{const n=[...f(e),...F(e)],o=[...f(t),...F(t)];return m(n)===m(o)&&n.every((([e,n])=>r(A(e,t),(()=>d(n,t[e])))))},Q=(r,e)=>!![Number,String,Boolean].some((t=>C(t,r,e)))&&d(r.valueOf(),e.valueOf()),V=(e,t)=>{const n=m(e),o=m(t);return!!r(a(n),(()=>a(o)))||n===o&&e.every(((r,e)=>d(r,t[e])))},W=(r,e)=>V([...r],[...e]),X=(r,e)=>r.byteLength===e.byteLength,Y=(r,e)=>r.toString()===e.toString(),Z=(r,e)=>J([...r],[...e]);export{d as equal,X as equalArrayBuffer,M as equalDate,N as equalError,w as equalPrimitive,Y as equalURL};\n//# sourceMappingURL=index.es.js.map\n","const o=o=>void 0===o,r=o=>\"symbol\"==typeof o,l=(r,e)=>o(e)?o=>l(o,r):r+e,e=Symbol(\"_\"),i=(o,r)=>{if(o===e)return r;throw Error(\"Placeholder is invalid Symbol\")},t=(l,e)=>o(e)?o=>t(l,o):r(l)?i(l,(o=>t(o,e))):l/e,y=(r,l)=>o(l)?o=>y(o,r):r*l,b=(l,e)=>o(e)?o=>b(l,o):r(l)?i(l,(o=>b(o,e))):l-e;export{e as _,l as add,t as divide,y as multiply,b as subtract};\n//# sourceMappingURL=index.es.js.map\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { add as _add } from '../deps.ts'\n\n// re-export\n\n/**\n * Adds first argument and second argument.\n *\n * @param a - The first input number\n * @param b - The second input number\n * @returns The result of `a + b`\n *\n * @example\n * ```ts\n * // Basic\n * add(1, 2) // 3\n * ```\n * @example\n * ```ts\n * // Bigint\n * add(1n, 2n) // 3n\n * ```\n *\n * @example\n * ```ts\n * // Curry\n * const plus2(2)\n * plus2(-3) // -1\n * ```\n *\n * @category `Math`\n *\n * @see Related to {@link subtract} {@link multiply} {@link divide}\n *\n * @public\n */\nexport const add = _add\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport type { AnyFn } from './types/index.ts'\n\n/**\n * Function or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsFunction<T extends unknown> = T extends AnyFn ? true : false\n\n/**\n * Whatever argument is type of `function` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'function'`\n *\n * @example\n * ```ts\n * isFunction(function) // true\n * isFunction('hello') // false\n * ```\n *\n * @public\n */\nconst isFunction = (val: unknown): val is AnyFn => typeof val === 'function'\n\nexport { isFunction }\nexport type { IsFunction }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { FalsyLike } from './types/index.ts'\n/**\n * Abbreviation for Not Not. Returns the `!!` of its argument.\n *\n * @param val - Input any value\n * @returns The result of `!!val`\n *\n * @remarks\n * The Definition of Falsy\n * - `''`\n * - `false`\n * - `0`\n * - `NaN`\n * - `undefined`\n * - `null`\n *\n * @example\n * ```ts\n * NN('') // false\n * NN(false) // false\n * NN(0) // false\n * NN(NaN) // false\n * NN(undefined) // false\n * NN(null) // false\n *\n * NN({}) // true\n * NN([]) // true\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link N}\n *\n * @public\n */\nconst NN = <T>(val: T): T extends FalsyLike ? false : boolean =>\n  !!val as T extends FalsyLike ? false : boolean\nexport { NN }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isFunction } from './isFunction.ts'\nimport { NN } from './NN.ts'\nimport { AnyFn } from './types/index.ts'\nimport { FalsyLike } from './types/index.ts'\n/**\n * Return the `onTrue` or the `onFalse` value depending upon the result of the condition `val`.\n *\n * @param val - A predicate value\n * @param onTrue - The `val` evaluates to a truthy value\n * @param onFalse - The `val` evaluates to a falsy value\n * @returns The result of `!!val` ? `onTrue` : `onFalse` (if argument is function, return value)\n *\n * @remarks\n * If you pass a function as an argument, return value will evaluate.\n *\n * @example\n * ```ts\n * ifElse(true, 1, 0) // 1\n * ifElse(false, 1, 0) // 0\n * ifElse(undefined, 1, 0) // 0\n * ifElse(() => true, () => 1, () => 0) // 1\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link ifElseFn}\n *\n * @public\n */\nconst ifElse = <V, T, F>(\n  val: V | AnyFn<any, V>,\n  onTrue: T | AnyFn<any, T>,\n  onFalse: F | AnyFn<any, F>\n): V extends FalsyLike ? F : V extends true ? T : T | F => {\n  const result = isFunction(val) ? NN(val()) : NN(val)\n  return result\n    ? isFunction(onTrue)\n      ? (onTrue() as V extends FalsyLike ? F : V extends true ? T : T | F)\n      : (onTrue as V extends FalsyLike ? F : V extends true ? T : T | F)\n    : isFunction(onFalse)\n    ? (onFalse() as V extends FalsyLike ? F : V extends true ? T : T | F)\n    : (onFalse as V extends FalsyLike ? F : V extends true ? T : T | F)\n}\n\nexport { ifElse }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { ifElse } from './ifElse.ts'\nimport { isFunction } from './isFunction.ts'\nimport { AnyFn } from './types/index.ts'\n/**\n * Returns return value if argument is `function`; otherwise returns the value as it is.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'function' ? val(): val`\n *\n * @example\n * ```ts\n * advance(1) // 1\n * advance(() => 1) // 1\n * ```\n *\n * @category `Logic`\n *\n * @public\n */\nconst advance = <T>(val: T | AnyFn<any, T>): T =>\n  ifElse(isFunction(val), () => (val as AnyFn<any, T>)(), val)\n\nexport { advance }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { advance } from './advance.ts'\nimport { ifElse } from './ifElse.ts'\nimport { NN } from './NN.ts'\nimport { FalsyLike } from './types/index.ts'\nimport { AnyFn } from './types/index.ts'\n/**\n * Returns `true` if both arguments are true; otherwise `false`.\n *\n * @param a - The first input any value\n * @param b - The second input any value\n * @returns The result of `!!a && !!bb` (if argument is function, return value)\n *\n * @remarks\n * If you pass a function as an argument, return value will evaluate.\n *\n * @example\n * ```ts\n * and(true, true) // true\n * and(false, true) // false\n * and(true, false) // false\n * and(false, false) // false\n * and(() => 1, () => 2) // true\n * and(() => 1, () => 0) // false\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link or} {@link xor}\n *\n * @public\n */\nconst and = <T, U>(\n  a: T | AnyFn<any, T>,\n  b: U | AnyFn<any, U>\n): T extends FalsyLike ? false : U extends FalsyLike ? false : boolean =>\n  ifElse(\n    NN(advance(a as unknown)),\n    () => NN(advance(b as unknown)) as any,\n    false\n  )\n\nexport { and }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Ord } from './types/index.ts'\n\n/**\n * Returns `true` if the first argument is less than or equal to the second; otherwise `false`.\n *\n * @param a - The first input value\n * @param b - The second input value\n * @returns The result of `a <= b`\n *\n * @example\n * ```ts\n * // Number\n * lte(1, 2) // true\n * lte(2, 2) // true\n * lte(2, 1) // false\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * lte(1n, 2n) // true\n * lte(2n, 2n) // true\n * lte(2n, 1n) // true\n * ```\n *\n * @example\n * ```ts\n * // String\n * lte('a', 'z') // true\n * lte('a', 'a') // true\n * lte('z', 'a') // false\n * ```\n *\n * @example\n * ```ts\n * // Boolean\n * lte(true, true) // true\n * lte(false, false) // true\n * lte(false, true) // true\n * lte(true, false) // false\n * ```\n *\n * @example\n * ```ts\n * // Date\n * lte(new Date('2000/1/1'), new Date('2000/1/1')) // true\n * lte(new Date('1999/12/31'), new Date('2000/1/1')) // true\n * lte(new Date('2000/1/2'), new Date('2000/1/1')) // false\n * ```\n *\n * @see Related to {@link lt} {@link gt} {@link gte}\n *\n * @public\n */\nconst lte = <T extends Ord>(a: T, b: T): boolean => a <= b\n\nexport { lte }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\n/**\n * Returns the elements of the given string or array from `from` to `to`.\n *\n * @param from - The start index\n * @param to - The end index\n * @param val - `String` or `Array`\n * @returns The result of `val.slice(from, to)`\n *\n * @example\n * ```ts\n * // String\n * slice(6, 11 ,'hello world') // 'world'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * slice(1, 2 ,[1, 2, 3, 4]) // [2]\n * ```\n *\n * @category `String` `Array`\n *\n * @public\n */\nconst slice = <T extends readonly unknown[] | string>(\n  from: number,\n  to: number,\n  val: T\n): T => val.slice(from, to) as T\n\nexport { slice }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nexport { _ } from 'https://x.nest.land/arithmetic4@0.1.1/mod.ts'\nexport const NULL = null\nexport const JSON_OBJECT = 'Object'\n\nconst { prototype, entries, keys, values } = Object\nconst { hasOwnProperty } = prototype\n\nexport { entries, hasOwnProperty, keys, values }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { NULL } from './constants/index.ts'\n\n/**\n * Null or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsNull<T extends unknown> = T extends null ? true : false\n\n/**\n * Whatever argument is type of `null` or not.\n *\n * @param val - Input any value\n * @returns The result of `val === null`\n *\n * @example\n * ```ts\n * isNull(null) // true\n * isNull(undefined) // false\n * ```\n *\n * @public\n */\nconst isNull = (val: unknown): val is null => val === NULL\n\nexport { isNull }\nexport type { IsNull }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Undefined or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsUndefined<T extends unknown> = T extends undefined ? true : false\n\n/**\n * Whatever argument is type of `undefined` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'undefined'`\n *\n * @example\n * ```ts\n * isUndefined(undefined) // true\n * isUndefined('hello') // false\n * ```\n *\n * @public\n */\nconst isUndefined = (val: unknown): val is undefined =>\n  typeof val === 'undefined'\n\nexport { isUndefined }\nexport type { IsUndefined }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { advance } from './advance.ts'\nimport { NN } from './NN.ts'\nimport { FalsyLike } from './types/index.ts'\nimport { AnyFn } from './types/index.ts'\n\n/**\n * Returns true if one or both of its arguments are true; otherwise false.\n *\n * @param a - The first input any value\n * @param b - The second input any value\n * @returns The result of `!!a || !!bb` (if argument is function, return value)\n *\n * @remarks\n * If you pass a function as an argument, return value will evaluate.\n\n * @example\n * ```ts\n * or(true, true) // true\n * or(false, true) // true\n * or(true, false) // true\n * or(false, false) // false\n *\n * or(() => 0, () => 1) // true\n * or(() => 0, () => 0) // false\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link and} {@link xor}\n *\n * @public\n */\nconst or = <T, U>(\n  a: T | AnyFn<any, T>,\n  b: U | AnyFn<any, U>\n): T extends FalsyLike ? (U extends FalsyLike ? false : boolean) : boolean =>\n  (NN(advance(a)) || NN(advance(b))) as T extends FalsyLike\n    ? U extends FalsyLike\n      ? false\n      : boolean\n    : boolean\nexport { or }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport type { IsNull } from './isNull.ts'\nimport { isNull } from './isNull.ts'\nimport { IsUndefined, isUndefined } from './isUndefined.ts'\nimport { or } from './or.ts'\n/**\n * Undefiled or null, or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsNil<T extends unknown> = IsUndefined<T> extends true\n  ? true\n  : IsNull<T> extends true\n  ? true\n  : false\n\n/**\n * Whatever argument is type of `undefined` or `null`.\n *\n * @param val - Input any value\n * @returns The result of type of `val` is `undefined` or `null`\n *\n * @example\n * ```ts\n * isNil(undefined) // true\n * isNil(null) // true\n * isNil([]) // false\n * ```\n *\n * @public\n *\n */\nconst isNil = (val: unknown): val is null | undefined =>\n  or(isUndefined(val), () => isNull(val))\n\nexport { isNil }\nexport type { IsNil }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { FalsyLike } from './types/index.ts'\n/**\n * Returns the `!` of its argument.\n *\n * @param val - Input any value\n * @returns The result of `!val`\n *\n * @remarks\n * The Definition of Falsy\n * - `''`\n * - `false`\n * - `0`\n * - `NaN`\n * - `undefined`\n * - `null`\n *\n * @example\n * ```ts\n * N('') // true\n * N(false) // true\n * N(0) // true\n * N(NaN) // true\n * N(undefined) // true\n * N(null) // true\n *\n * N({}) // false\n * N([]) // false\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link NN}\n *\n * @public\n */\nconst N = <T>(val: T): T extends FalsyLike ? true : boolean =>\n  !val as T extends FalsyLike ? true : boolean\nexport { N }\n","import { and } from './and.ts'\nimport { ifElse } from './ifElse.ts'\nimport { isNil } from './isNil.ts'\nimport { N } from './N.ts'\n\n/**\n * Safe getter for `constructor.name`.\n * @param val - Any value\n * @returns If `val` is `null` or `undefined`, empty string; otherwise `constructor.name`\n *\n * @example\n * ```ts\n * constructorName(null) // ''\n * constructorName(undefined) // ''\n * constructorName({}) // 'Object'\n * constructorName('') // 'String'\n * ```\n *\n * @public\n */\nconst constructorName = (val: unknown): string =>\n  ifElse(\n    and(N(isNil(val)), () => (val as Record<string, unknown>).constructor),\n    () => (val as Record<string, unknown>).constructor.name ?? '',\n    ''\n  )\n\nexport { constructorName }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Number or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsNumber<T extends unknown> = T extends number ? true : false\n\n/**\n * Whatever argument is type of `number` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'number'`\n *\n * @example\n * ```ts\n * isNumber(0) // true\n * isNumber('hello') // false\n * ```\n *\n * @public\n */\nconst isNumber = (val: unknown): val is number => typeof val === 'number'\n\nexport { isNumber }\nexport type { IsNumber }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { subtract as _subtract } from '../deps.ts'\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { _ } from './constants/index.ts'\n\n// re-export\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @param a - The first input number\n * @param b - The second input number\n * @returns The result of `a - b`\n *\n * @remarks\n * Since subtraction is not idempotent, there are two ways to curry.\n *\n * @example\n * ```ts\n * // Number\n * subtract(2, 1) // 1\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * subtract(3n, 2n) //1n\n * ```\n *\n * @example\n * ```ts\n * // First argument curry\n * const from5Minus = subtract(5)\n * from5Minus(10) // -5\n * ```\n *\n * @example\n * ```ts\n * // Second argument curry\n * import { _ } from 'fonction'\n * const minus5 = (_, 5)\n * minus5(20) // 15\n * ```\n *\n * @category `Math`\n *\n * @see Related to {@link add} {@link multiply} {@link divide}\n *\n * @public\n */\nexport const subtract = _subtract\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Whatever argument is `NaN` or not.\n *\n * @param val - Input any value\n * @returns The result of `Number.isNaN(val)`\n *\n * @remarks\n * `NaN` is primitive `number`.\n *\n * @example\n * ```ts\n * isNaN(NaN) // true\n * isNaN(100) // false\n * ```\n *\n * @public\n *\n */\nconst isNaN = (val: unknown): val is typeof NaN => Number.isNaN(val)\n\nexport { isNaN }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { divide as _divide } from '../deps.ts'\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { _ } from './constants/index.ts'\n\n// re-export\n\n/**\n * Divide its second argument from its first argument.\n *\n * @param a - The first input number\n * @param b - The second input number\n * @returns The result of `a / b`\n\n * @remarks\n * Since division is not idempotent, there are two ways to curry.\n *\n * @example\n * ```ts\n * // Number\n * divide(10, 100) // 0.1\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * divide(1n, 2n) // 3n\n * ```\n *\n * @example\n * ```ts\n * // First argument curry\n * const reciprocal = divide(1)\n * reciprocal(4) // 0.25\n * ```\n *\n * @example\n * ```ts\n * // Second argument curry\n * import { _ } from 'fonction'\n * const half = divide(_, 2)\n * half(20) // 10\n * ```\n *\n * @category `Math`\n *\n * @see Related to {@link add} {@link subtract} {@link multiply}\n *\n * @public\n */\nexport const divide = _divide\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * String or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsString<T extends unknown> = T extends string ? true : false\n\n/**\n * Whatever argument is type of `string` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'string'`\n *\n * @example\n * ```ts\n * isString('hello world') // true\n * isString(1000) // false\n * ```\n *\n * @public\n */\nconst isString = (val: unknown): val is string => typeof val === 'string'\n\nexport { isString }\nexport type { IsString }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { entries as _entries } from './constants/index.ts'\n/**\n * Returns an array of key/values of the enumerable properties of an object.\n *\n * @param val - `Object` that contains the properties and methods\n * @returns The result of `Object.entries(val)`\n *\n * @remarks\n * The order of the output array is not guaranteed to be consistent across different JS platforms.\n *\n * @example\n * ```ts\n * entries({ a: 'b' }) // [['a', 'b']]\n * entries(['a', 'b', 'c']) // [['0', 'a'], ['1', 'b'], ['2', 'c']]\n * entries({}) // []\n * entries([]) // []\n * ```\n *\n * @category `Object` `Array`\n *\n * @see Related to {@link keys} {@link values}\n *\n * @public\n */\nconst entries: {\n  <T>(\n    val:\n      | {\n          [key: string]: T\n        }\n      | ArrayLike<T>\n  ): [string, T][]\n  (val: Record<string, unknown>): [string, unknown][]\n} = (val: any) => _entries(val)\n\nexport { entries }\n","import { equal as _equal } from '../deps.ts'\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles cyclical data structures.\n *\n * @param a - Input any value\n * @param b - Input any value\n * @returns Return `true` if the reference memory is the same or the property members and their values are the same\n *\n * @example\n * ```ts\n * equals(-0, 0) // true\n * equals(NaN, NaN) // true\n * equals([[[[]]]], [[[[]]]]) // true\n * equals({ a: { b: [1, 2, 3]}}, { a: { b: [1, 2, 3]}}) // true\n * ```\n *\n * @public\n */\nconst equal = _equal\n\nexport { equal }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Whatever argument is `Array` or not.\n *\n * @param val - Input any value\n * @returns The result of `Array.isArray(val)`\n *\n * @example\n * ```ts\n * isArray([]) // true\n * isArray(['hello', 'world']) // true\n * isArray({}) // false\n * ```\n *\n * @public\n */\nconst isArray = (val: unknown): val is any[] => Array.isArray(val)\n\nexport { isArray }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Returns length property.\n *\n * @param val - Value with length property\n * @returns The result of `val.length`\n *\n * @example\n * ```ts\n * length('hello') // 5\n * length(['hello', 'world', 1]) // 3\n * length({length: 5, text: 'hello'}) // 5\n * ```\n *\n * @public\n */\nconst length = <T extends { length: number }>(val: T): T['length'] => val.length\n\nexport { length }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Ord } from './types/index.ts'\n\n/**\n * Returns `true` if the first argument is less than the second; otherwise `false`.\n *\n * @param a - The first input value\n * @param b - The second input value\n * @returns The result of `a < b`\n *\n * @example\n * ```ts\n * // Number\n * lt(1, 2) // true\n * lt(2, 2) // false\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * lt(1n, 2n) // true\n * lt(2n, 2n) // false\n * ```\n *\n * @example\n * ```ts\n * // String\n * lt('a', 'z') // true\n * lt('a', 'a') // false\n * ```\n *\n * @example\n * ```ts\n * // Boolean\n * lt(false, true) // true\n * lt(true, true) // false\n * lt(false, false) // false\n * lt(true, false) // false\n * ```\n *\n * @example\n * ```ts\n * // Date\n * lt(new Date('1999/12/31'), new Date('2000/1/1')) // true\n * lt(new Date('2000/1/1'), new Date('2000/1/1')) // false\n * lt(new Date('2000/1/2'), new Date('2000/1/1')) // false\n * ```\n *\n * @see Related to {@link lte} {@link gt} {@link gte}\n *\n * @public\n */\nconst lt = <T extends Ord>(a: T, b: T): boolean => a < b\n\nexport { lt }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\nimport { ifElse } from './ifElse.ts'\nimport { lt } from './lt.ts'\nimport { slice } from './slice.ts'\n\n/**\n * Return a slice of string or array with `n` elements taken from the beginning.\n *\n * @param howMany - The number of elements to take\n * @param val - `String` or `Array` to query\n * @returns The slice of array\n *\n * @example\n * ```ts\n * // String\n * take(3, 'hello') // 'hel'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * take(3, [1, 2, 3, 4]) // [1, 2, 3]\n * ```\n *\n * @category `String` `Array`\n *\n * @see Related to {@link slice} {@link takeLast}\n *\n * @public\n */\nconst take = <T extends readonly unknown[] | string>(\n  howMany: number,\n  val: T\n): T =>\n  ifElse(\n    lt(howMany, 0),\n    () => val.slice(howMany) as T,\n    () => slice(0, howMany, val)\n  )\n\nexport { take }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { ifElse } from './ifElse.ts'\nimport { isArray } from './isArray.ts'\nimport { length } from './length.ts'\nimport { take } from './take.ts'\nimport { String2Array } from './types/index.ts'\n\n/**\n * Infer the first types.\n *\n * @typeParam T - `string` or any `array`\n * @returns First element of the `T`\n *\n * @example\n * ```ts\n * // String\n * First<string> // string\n * First<''> // ''\n * First<'hello'> // 'h'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * First<[] | never[] | readonly [] | readonly never[]> // undefined\n * First<['hello', 'world']> // 'hello'\n * First<string | number[]> // string | number\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link Last}\n *\n * @public\n */\ntype First<T extends readonly unknown[] | string> = T extends ''\n  ? ''\n  : T extends string\n  ? String2Array<T> extends []\n    ? string\n    : String2Array<T>[0]\n  : T extends readonly never[] | []\n  ? undefined\n  : T[0]\n\n/**\n * Returns the first element of the given list or string.\n *\n * @param val - String or any array object\n * @returns The first element of the `val`\n *\n * @example\n * ```ts\n * // String\n * first('') // ''\n * first('hello') // 'h'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * first('hello', 'new', 'world') // 'hello'\n * first([]) // undefined\n * first(['one', 2, 3, 4]) // 'one'\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link last}\n *\n * @public\n */\nconst first = <T extends readonly unknown[] | string>(val: T): First<T> =>\n  ifElse(\n    isArray(val),\n    () =>\n      ifElse(\n        length(val as T & any[]),\n        () => take(1, val)[0] as First<T>,\n        undefined as First<T>\n      ),\n    () => take(1, val) as First<T>\n  )\n\nexport { first }\nexport type { First }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { hasOwnProperty } from '../constants/index.ts'\n\n/**\n * Returns whether or not an object has an own property with the specified name.\n *\n * @param props - The name of the property to check for\n * @param obj - The check object\n * @returns The result of `Object.prototype.hasOwnProperty.call(obj, props)`\n *\n * @example\n * ```ts\n * has('hello', { hello: 'world' }) // true\n * has(0, { 0 : 1}) // true\n * has('', {}) // false\n * has('hello', { hi : hello: 'world' }) // false\n * ```\n *\n * @internal\n */\nconst has = <T extends string | number, U extends Record<PropertyKey, unknown>>(\n  props: T,\n  obj: U\n): U extends Record<T, unknown> ? true : false =>\n  hasOwnProperty.call(obj, props) as U extends Record<T, unknown> ? true : false\n\nexport { has }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { ifElse } from './ifElse.ts'\nimport { isArray } from './isArray.ts'\nimport { isString } from './isString.ts'\nimport { length } from './length.ts'\nimport { N } from './N.ts'\nimport { or } from './or.ts'\n/**\n * Whatever argument length is `0` or not.\n *\n * @param val - Input any value\n * @returns The result of `!val.length` (if not have `length` property, `false`)\n *\n * @example\n * ```ts\n * isLength0([]) // true\n * isLength0([]) // true\n * isLength0('hello') // false\n * isLength0(undefined) // false\n * ```\n *\n * @category `Array` `String`\n *\n * @public\n */\nconst isLength0 = (val: unknown): val is 0 =>\n  ifElse(\n    or(isString(val), () => isArray(val)),\n    () => N(length(val as string | unknown[])),\n    false\n  )\n\nexport { isLength0 }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Bigint or not.\n *\n * @typeParam T - Any value\n */\ntype IsBigint<T extends unknown> = T extends bigint ? true : false\n\n/**\n * Whatever argument is type of `bigint` or not.\n *\n * @param val - input any value\n * @returns The result of `typeof val === 'bigint'`\n *\n * @example\n * ```ts\n * isBigint(1n) // true\n * isBigint(1000) // false\n * ```\n *\n * @public\n */\nconst isBigint = (val: unknown): val is bigint => typeof val === 'bigint'\n\nexport { isBigint }\nexport type { IsBigint }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Boolean or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsBoolean<T extends unknown> = T extends boolean ? true : false\n\n/**\n * Whatever argument is type of `boolean` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'boolean'`\n *\n * @example\n * ```ts\n * isBoolean(true) // true\n * isBoolean('hello') // false\n * ```\n *\n * @public\n */\nconst isBoolean = (val: unknown): val is boolean => typeof val === 'boolean'\n\nexport { isBoolean }\nexport type { IsBoolean }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport type { IsNull } from './isNull.ts'\nimport { isNull } from './isNull.ts'\nimport { IsUndefined, isUndefined } from './isUndefined.ts'\nimport { or } from './or.ts'\n/**\n * Undefiled or null, or not.\n *\n * @typeParam T - Any value\n *\n * @public\n * @deprecated\n * This is typo. It will rename to `isNil` next major release.\n */\ntype IsNill<T extends unknown> = IsUndefined<T> extends true\n  ? true\n  : IsNull<T> extends true\n  ? true\n  : false\n\n/**\n * Whatever argument is type of `undefined` or `null`.\n *\n * @param val - Input any value\n * @returns The result of type of `val` is undefined or null\n *\n * @example\n * ```ts\n * isNumber(0) // true\n * isNumber('hello') // false\n * ```\n *\n * @public\n *\n * @deprecated\n * This is typo. It will rename to `isNil` next major release.\n *\n */\nconst isNill = (val: unknown): val is null | undefined =>\n  or(isUndefined(val), () => isNull(val))\n\nexport { isNill }\nexport type { IsNill }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Symbol or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsSymbol<T extends unknown> = T extends symbol ? true : false\n\n/**\n * Whatever argument is type of `symbol` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'symbol'`\n *\n * @example\n * ```ts\n * isSymbol(Symbol('hello')) // true\n * isSymbol('hello') // false\n * ```\n *\n * @public\n */\nconst isSymbol = (val: unknown): val is symbol => typeof val === 'symbol'\n\nexport { isSymbol }\nexport type { IsSymbol }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { IsBigint, isBigint } from './isBigint.ts'\nimport { IsBoolean, isBoolean } from './isBoolean.ts'\nimport { IsNill, isNill } from './isNill.ts'\nimport { IsNumber, isNumber } from './isNumber.ts'\nimport { IsString, isString } from './isString.ts'\nimport { IsSymbol, isSymbol } from './isSymbol.ts'\nimport { Primitive } from './types/index.ts'\n\n/**\n * Primitive or not.\n *\n * @typeParam T - Any value\n *\n * @public\n */\ntype IsPrimitive<T extends unknown> = IsBigint<T> extends true\n  ? true\n  : IsBoolean<T> extends true\n  ? true\n  : IsNill<T> extends true\n  ? true\n  : IsNumber<T> extends true\n  ? true\n  : IsString<T> extends true\n  ? true\n  : IsSymbol<T> extends true\n  ? true\n  : false\n\n/**\n * Whatever argument is `primitive` or not.\n *\n * @param val - Input any value\n * @returns The result of primitive or not\n *\n * @remarks\n * Definition of Primitive\n * - `string`\n * - `number`\n * - `bigint`\n * - `boolean`\n * - `symbol`\n * - `undefined`\n * - `null`\n *\n * @example\n * ```ts\n * isPrimitive(true) // true\n * isPrimitive([]) // false\n * ```\n *\n * @public\n */\nconst isPrimitive = (val: unknown): val is Primitive =>\n  [isNill, isBoolean, isNumber, isString, isBigint, isSymbol].some((is) =>\n    is(val)\n  )\n\nexport { isPrimitive }\nexport type { IsPrimitive }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isPrimitive } from './isPrimitive.ts'\nimport { N } from './N.ts'\n\n/**\n * Whatever argument is type of `object` or not.\n *\n * @param val - Input any value\n * @returns The result of object or not\n *\n * @remarks\n * Definition of Object\n *\n * Not Primitive\n *\n * @remarks\n * Definition of Primitive\n * - `string`\n * - `number`\n * - `bigint`\n * - `boolean`\n * - `symbol`\n * - `undefined`\n * - `null`\n *\n *\n * @example\n * ```ts\n * isObject([]) // true\n * isObject('hello') // false\n * ```\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst isObject = (val: unknown): val is Record<string, unknown> =>\n  N(isPrimitive(val))\n\nexport { isObject }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { slice } from './slice.ts'\n/**\n * Returns all but the first element of the given list or string.\n *\n * @param val - string or any array object\n * @returns The result of `val.slice(1, Infinity)`\n *\n * @example\n * ```ts\n * // String\n * tail('hello') // 'ello'\n * tail('h') // ''\n * tail('') // ''\n * ```\n *\n * @example\n * ```ts\n * tail([1, 2, 3]) // [2, 3]\n * tail(['hello', 'world']) // ['world']\n * tail(['hello']) // []\n * tail([]) // []\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link head}\n *\n * @public\n */\nconst tail: {\n  (val: string): string\n  <T extends unknown[]>(val: T): T\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: any) => slice(1, Infinity, val)\n\nexport { tail }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { and } from '../and.ts'\nimport { first } from '../first.ts'\nimport { ifElse } from '../ifElse.ts'\nimport { isLength0 } from '../isLength0.ts'\nimport { isObject } from '../isObject.ts'\nimport { isUndefined } from '../isUndefined.ts'\nimport { tail } from '../tail.ts'\nimport { has } from './has.ts'\n\n/**\n * Returns whether or not a path exists in an object. Only the object's own properties are checked.\n *\n * @param path - The path to use\n * @param obj - The object to check the path in\n * @returns Whether the path exists\n *\n * @example\n * ```ts\n * hasPath(['hello'], { hello: 'world' }) // true\n * hasPath([0], { 0: 1 }) // true\n * hasPath(['hello', 'world'], { hello: { world: '' } } // true\n *\n * hasPath(['hi'], { hello: '' } ) // false\n * hasPath(['hi', 'Tom'], { hi: { John: 1 } } ) // false\n * ```\n *\n * @internal\n */\n\n// TODO: Improve type inference\nconst hasPath = <T extends unknown>(\n  path: (string | number)[],\n  obj: Record<PropertyKey, T>\n): boolean => {\n  const key = first(path)\n  if (isUndefined(key)) return false\n  const rest = tail(path)\n  if (isLength0(rest)) {\n    return has(key, obj)\n  }\n  return ifElse(\n    and(has(key, obj), () => isObject(obj[key])),\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    () => hasPath(rest, obj[key] as any),\n    false\n  )\n}\n\nexport { hasPath }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { has as _has } from './_/has.ts'\nimport { hasPath as _hasPath } from './_/hasPath.ts'\nimport { isArray } from './isArray.ts'\n\n/**\n * Returns whether or not an object has an own property with the specified name.\n *\n * @param props - The name of the property to check for\n * @param obj - The check object\n * @returns The result of `Object.prototype.hasOwnProperty`\n *\n * @example\n * ```ts\n * // Flat\n * has('hello', { hello: 'world' }) // true\n * has(0, { 0 : 1}) // true\n * has('', {}) // false\n * has('hello', { hi : hello: 'world' }) // false\n * ```\n *\n * @example\n * ```ts\n * // Nest\n * hasPath(['hello'], { hello: 'world' }) // true\n * hasPath([0], { 0: 1 }) // true\n * hasPath(['hello', 'world'], { hello: { world: '' } } // true\n *\n * hasPath(['hi'], { hello: '' } ) // false\n * hasPath(['hi', 'Tom'], { hi: { John: 1 } } ) // false\n * ```\n *\n * @category `Object`\n *\n * @see Related to {@link props}\n *\n * @public\n */\nconst has = <\n  T extends string | number | (string | number)[],\n  U extends Record<PropertyKey, unknown>\n>(\n  props: T,\n  obj: U\n): T extends unknown[]\n  ? boolean\n  : T extends string | number\n  ? U extends Record<T, unknown>\n    ? true\n    : false\n  : never =>\n  isArray(props)\n    ? _hasPath(props, obj)\n    : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (_has(props as string | number, obj) as any)\n\nexport { has }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { hasPath as _hasPath } from './_/hasPath.ts'\n\n/**\n * Returns whether or not a path exists in an object. Only the object's own properties are checked.\n *\n * @deprecated\n * This function will remove next major release.\n * `hasPath` merged `has` function.\n *\n * @param path - The path to use\n * @param obj - The object to check the path in\n * @returns Whether the path exists\n *\n * @example\n * ```ts\n * hasPath(['hello'], { hello: 'world' }) // true\n * hasPath([0], { 0: 1 }) // true\n * hasPath(['hello', 'world'], { hello: { world: '' } } // true\n *\n * hasPath(['hi'], { hello: '' } ) // false\n * hasPath(['hi', 'Tom'], { hi: { John: 1 } } ) // false\n * ```\n *\n * @category `Object`\n *\n * @see Related to {@link has}\n *\n *\n * @public\n */\nconst hasPath = _hasPath\n\nexport { hasPath }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { curry } from '../deps.ts'\n\n/**\n * @internal\n */\nconst _includes = <T extends string | unknown[]>(\n  collection: T,\n  val: T[number]\n): boolean => collection.includes(val as any)\n\n/**\n * Checks if value is in collection.\n *\n * @param collection - The collection to inspect\n * @param val - The value to search for\n * @returns The result of `collection.includes(val)`\n *\n * @example\n * ```ts\n * includes('hello', 'lo') // true\n * includes([1, 2, 3], 3) // true\n * ```\n *\n * @category `String` `Array`\n *\n * @public\n */\nconst includes = curry(_includes)\n\nexport { _includes, includes }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { keys as _keys } from './constants/index.ts'\n/**\n * Returns the names of the enumerable string properties and methods of an object.\n *\n * @param val - `Object` that contains the properties and methods\n * @returns The result of `Object.keys(val)`\n *\n * @remarks\n * The order of the output array is not guaranteed to be consistent across different JS platforms.\n *\n * @example\n * ```ts\n * keys({}) // []\n * keys({ 'a': 'b' }) // ['a']\n * keys({ 0: 'hello', 1: 'world' }) // ['0', '1']\n * ```\n *\n * @category `Object`\n *\n * @see Related to {@link values} {@link entries}\n *\n * @public\n */\nconst keys = <T extends PropertyKey>(val: Record<T, unknown>): string[] =>\n  _keys(val)\n\nexport { keys }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\nimport { ifElse } from './ifElse.ts'\nimport { lte } from './lte.ts'\nimport { slice } from './slice.ts'\n\n/**\n * Return a slice of string or array with `n` elements taken from the end.\n *\n * @param howMany - The number of elements to take\n * @param val - `String` or `Array` to query\n * @returns The slice of array\n *\n * @example\n * ```ts\n * // String\n * takeLast(3, 'hello') // 'llo'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * takeLast(3, [1, 2, 3, 4]) // [2, 3, 4]\n * ```\n *\n * @category `String` `Array`\n *\n * @see Related to {@link slice} {@link take}\n *\n * @public\n */\nconst takeLast = <T extends readonly unknown[] | string>(\n  howMany: number,\n  val: T\n): T =>\n  ifElse(\n    lte(howMany, 0),\n    () => slice(0, -howMany, val) as T,\n    () => val.slice(-howMany) as T\n  )\n\nexport { takeLast }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { multiply as _multiply } from '../deps.ts'\n\n// re-export\n\n/**\n * Multiplies first argument and second argument.\n *\n * @param a - The first input number\n * @param b - The second input number\n * @returns The result of `a * b`\n *\n * @example\n * ```ts\n * // Basic\n * multiply(2, 3) // 6\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * multiply(2n, 3n) // 6n\n * ```\n *\n * @example\n * ```ts\n * // Curry\n * const double = multiply(2)\n * double(4) // 8\n * ```\n *\n * @category `Math`\n *\n * @see Related to {@link add} {@link subtract} {@link divide}\n *\n * @public\n */\nexport const multiply = _multiply\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { curry } from '../deps.ts'\n\nconst _test = (regExp: RegExp, val: string): boolean => regExp.test(val)\n\n/**\n * whether a given `string` matches a given regular expression.\n *\n * @param regExp - Any Regular expression\n * @param val - Any `string` value\n * @returns The result is `regExp.test(val)`\n *\n * @example\n * ```ts\n * test(new RegExp('^test'), 'testdata') // true\n * test(/xyz$/, 'testxyz') // true\n * ```\n *\n * @category `String`\n *\n * @public\n */\nconst test = curry(_test)\n\nexport { _test, test }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { AnyFn } from './types/index.ts'\n\n/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @returns false\n *\n * @example\n * ```ts\n * F() // false\n * F(1, 'hello', 'world') // false\n * ```\n *\n * @see Related to {@link T}\n *\n * @public\n */\nconst F: AnyFn<unknown, false> = () => false\n\nexport { F }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * K combinator. Returns a function that always returns the given value.\n *\n * @param val - The value to wrap in a function\n * @returns Function wrapped `val`\n *\n * @example\n * ```ts\n * const k = K('k')\n * k() // 'k'\n * ```\n *\n * @public\n */\nconst K = <T extends unknown>(val: T): (() => T) => (): T => val\n\nexport { K }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { AnyFn } from './types/index.ts'\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @returns `True`\n *\n * @example\n * ```ts\n * T() // true\n * T(1, 'hello', 'world') // true\n * ```\n *\n * @see Related to {@link F}\n *\n * @public\n */\nconst T: AnyFn<unknown, true> = () => true\n\nexport { T }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Returns a new list containing the contents of the given list, followed by the given value.\n *\n * @param val - The value to add to the end of the new list\n * @param list - The list of elements to add a new item to\n * @returns The result of `[...list, val]`\n *\n * @example\n * ```ts\n * append('Tom', ['hello']) // ['hello', 'Tom']\n * append('Tom', []) // ['Tom']\n * append(['Tom'], ['hello', 'world']) // ['hello', 'world', ['Tom']]\n * ```\n *\n * @see Related to {@link prepend}\n *\n * @category `Array`\n *\n * @public\n */\nconst append = <T, U>(val: T, list: U[]): (T | U)[] => [...list, val]\nexport { append }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { add } from './add.ts'\nimport { ifElse } from './ifElse.ts'\nimport { lte } from './lte.ts'\nimport { slice } from './slice.ts'\n/**\n * Return an array of elements split into groups the length of size.\n *\n * @param size - The length of each chunk\n * @param array - The array to process\n * @returns Returns the new array of chunks\n *\n * @remarks\n * If array can't be split evenly, the final chunk will be the remaining elements.\n *\n * @example\n * ```ts\n * // Basic\n * chunk(1, ['a', 'b', 'c', 'd']) // [['a'], ['b'], ['c'], ['d']]\n * chunk(3, ['a', 'b', 'c', 'd']) // [['a', 'b', 'c'], ['d']]\n * chunk(5, ['a', 'b', 'c', 'd']) // [['a', 'b', 'c', 'd']]\n * ```\n *\n * @example\n * ```ts\n * // Illegal size\n * chunk(0, ['a', 'b', 'c']) // ['a', 'b', 'c']\n * chunk(-3, ['a', 'b', 'c']) // ['a', 'b', 'c']\n * chunk(5, []) // []\n * ```\n *\n * @category `Array`\n *\n * @public\n */\nconst chunk = <T extends number, U extends readonly unknown[]>(\n  size: T,\n  array: U\n): T extends 0\n  ? U\n  : `${T}` extends `-${number}`\n  ? U\n  : U extends readonly []\n  ? U\n  : U extends readonly (infer R)[]\n  ? R[][]\n  : never =>\n  ifElse(\n    lte(size, 0 as T),\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    array as any,\n    () =>\n      array.reduce(\n        (acc, _, index) =>\n          ifElse(index % size, acc, [\n            ...(acc as never),\n            slice(index, add(index, size), array)\n          ]),\n        []\n      )\n  )\n\nexport { chunk }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isNumber } from './isNumber.ts'\nimport { subtract } from './subtract.ts'\n\n/**\n * Decrements its argument.\n *\n * @param val - input `number` or `bigint`\n * @returns Decremented `val`\n *\n * @example\n * ```ts\n * dec(100) // 99\n * dec(10n) // 9n\n * ```\n *\n * @see Related to {@link inc}\n *\n * @public\n */\nconst dec: {\n  (val: number): number\n  (val: bigint): bigint\n} = (val: unknown) =>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (isNumber(val) ? subtract(val, 1) : subtract(val as bigint, 1n)) as any\n\nexport { dec }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isNaN } from './isNaN.ts'\nimport { IsNil, isNil } from './isNil.ts'\nimport { IsNumber } from './isNumber.ts'\nimport { or } from './or.ts'\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`; otherwise the first argument is returned.\n *\n * @param a - `a` will be returned instead of `default`\n * @returns Returns a function that stores the default `a` value. The function accept `b` argument.\n * if `b` is `null`, `undefined` or `NaN`, return `a`; otherwise return `b`\n *\n * @example\n * ```ts\n * const defaultVal = defaultTo('anonymous')\n * defaultVal(undefined) // 'anonymous'\n * defaultVal(null) // 'anonymous'\n * defaultVal(NaN) // 'anonymous'\n *\n * defaultVal('Tom') // 'Tom'\n * ```\n *\n * @public\n */\nconst defaultTo =\n  <T extends unknown>(a: T) =>\n  <U extends unknown>(\n    b: U\n  ): IsNil<U> extends true ? T : IsNumber<U> extends false ? U : T | U =>\n    (or(isNil(b), () => isNaN(b)) ? a : b) as IsNil<U> extends true\n      ? T\n      : IsNumber<U> extends false\n      ? U\n      : T | U\n\nexport { defaultTo }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { ifElse } from './ifElse.ts'\nimport { isString } from './isString.ts'\n\ntype EndsWith<T extends string | undefined = undefined> = T extends undefined\n  ? (target: string) => ReturnType<string['endsWith']>\n  : ReturnType<string['endsWith']>\n\n/**\n * Checks if a string ends with the provided substring.\n *\n * @param val - Search string\n * @param target - Target string\n * @returns The result of `target.endsWith(val)`\n *\n * @example\n * ```ts\n * // Basic\n * endsWith('world', 'hello world') // true\n * endsWith('earth', 'hello world') // false\n * ```\n *\n * @example\n * ```ts\n * // Curry\n * const endsWithHtml = endsWith('html')\n * endsWithHtml('index.html') // true\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link startsWith}\n *\n * @public\n */\nconst endsWith = <T extends string, U extends string | undefined = undefined>(\n  val: T,\n  target?: U\n): EndsWith<U> =>\n  ifElse(\n    isString(target),\n    () => (target as string).endsWith(val) as EndsWith<U>,\n    () => ((_target: string) => endsWith(val, _target)) as EndsWith<U>\n  )\n\nexport { endsWith }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Infer deep flatted array.\n *\n * @typeParam T - input any array\n * @returns Deep flatted array\n *\n * @example\n * ```ts\n * FlattenDeep<[]> // []\n * FlattenDeep<[[1, [2, [3, [4]], 5]]> // [1, 2, 3, 4, 5]\n * ```\n *\n * @category `Array`\n *\n * @public\n */\ntype FlattenDeep<T extends readonly unknown[]> = T extends readonly [\n  infer A,\n  ...infer Rest\n]\n  ? A extends readonly unknown[]\n    ? [...FlattenDeep<A>, ...FlattenDeep<Rest>]\n    : [A, ...FlattenDeep<Rest>]\n  : [...T]\n/**\n * Recursively flattens array.\n *\n * @param val - The `array` to flatten\n * @returns The result of `val.flat(Infinity)`\n *\n * @example\n * ```ts\n * flattenDeep([]) // []\n * flattenDeep([1, [2, [3, [4]], 5]]) // [1, 2, 3, 4, 5]\n * ```\n *\n * @public\n */\nconst flattenDeep = <T extends readonly unknown[]>(val: T): FlattenDeep<T> =>\n  val.flat(Infinity) as FlattenDeep<T>\n\nexport { flattenDeep }\nexport type { FlattenDeep }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Ord } from './types/index.ts'\n/**\n * Returns `true` if the first argument is greater than the second; otherwise `false`.\n *\n * @param a - The first input value\n * @param b - The second input value\n * @returns The result of `a > b`\n *\n * @example\n * ```ts\n * // Number\n * gt(2, 1) // true\n * gt(2, 2) // false\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * gt(2n, 1n) // true\n * gt(2n, 2n) // false\n * ```\n *\n * @example\n * ```ts\n * // String\n * gt('z', 'a') // true\n * gt('a', 'z') // false\n * ```\n *\n * @example\n * ```ts\n * // Boolean\n * gt(true, false) // true\n * gt(false, true) // false\n * gt(true, true) // false\n * gt(false, false) // false\n * ```\n *\n * @example\n * ```ts\n * // Date\n * gt(new Date('2000/1/2'), new Date('2000/1/1')) // true\n * gt(new Date('1999/12/31'), new Date('2000/1/1')) // false\n * gt(new Date('2000/1/1'), new Date('2000/1/1')) // false\n * ```\n *\n * @see Related to {@link gte} {@link lt} {@link lte}\n *\n * @public\n */\nconst gt = <T extends Ord>(a: T, b: T): boolean => a > b\n\nexport { gt }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Ord } from './types/index.ts'\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second; otherwise `false`.\n *\n * @param a - The first input value\n * @param b - The second input value\n * @returns The result of `a >= b`\n *\n * @example\n * ```ts\n * // Number\n * gte(2, 1) // true\n * gte(2, 2) // true\n * gte(2, 3) // false\n * ```\n *\n * @example\n * ```ts\n * // Bigint\n * gte(2n, 1n) // true\n * gte(2n, 2n) // true\n * gte(2n, 3n) // false\n * ```\n *\n * @example\n * ```ts\n * // String\n * gte('z', 'a') // true\n * gte('a', 'a') // true\n * gte('a', 'z') // false\n * ```\n *\n * @example\n * ```ts\n * // Boolean\n * gte(true, false) // true\n * gte(true, true) // true\n * gte(false, false) // true\n * gte(false, true) // false\n * ```\n *\n * @example\n * ```ts\n * // Date\n * gte(new Date('2000/1/2'), new Date('2000/1/1')) // true\n * gte(new Date('2000/1/1'), new Date('2000/1/1')) // true\n * gte(new Date('1999/12/31'), new Date('2000/1/1')) // false\n * ```\n *\n * @see Related to {@link gt} {@link lt} {@link lte}\n *\n * @public\n */\nconst gte = <T extends Ord>(a: T, b: T): boolean => a >= b\n\nexport { gte }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { slice } from './slice.ts'\n/**\n * Returns all but the last element of the given list or string.\n *\n * @param val - string or any array object\n * @returns The result of `val.slice(0, -1)`\n *\n * @example\n * ```ts\n * // String\n * head('hello') // 'hell'\n * head('h') // ''\n * head('') // ''\n * ```\n *\n * @example\n * ```ts\n * head([1, 2, 3]) // [1, 2]\n * head(['hello', 'world']) // ['hello']\n * head(['hello']) // []\n * head([]) // []\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link tail}\n *\n * @public\n */\nconst head: {\n  (val: string): string\n  <T extends unknown[]>(val: T): T\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: any) => slice(0, -1, val)\n\nexport { head }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Return the parameter supplied to it.\n *\n * @param val - The value to return\n * @returns The result of `val`\n *\n * @example\n * ```ts\n * identity(1) // 1\n * identity({}) // {}\n * ```\n *\n * @public\n */\nconst identity = <T>(val: T): T => val\n\nexport { identity }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { ifElse } from './ifElse.ts'\nimport { isFunction } from './isFunction.ts'\nimport { FalsyLike } from './types/index.ts'\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse` function depending upon the result of the condition predicate.\n *\n * @param condition - A predicate function\n * @param onTrue - Any value or A function to invoke when the `condition` evaluates to a truthy value\n * @param onFalse - Any value or A function to invoke when the `condition` evaluates to a falsy value\n * @returns A new function that will process either the `onTrue` or the `onFalse` function depending upon the result of the `condition` predicate\n *\n * @example\n * ```ts\n * ifElseFn((x: number) => x > 10, 'big', 'small')(20) // 'big'\n * const fn = ifElseFn((x: number) => x > 10, (x) => x + 1, (x) => x - 1)\n * fn(11) // 12\n * fn(9) // 8\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link ifElse}\n *\n * @public\n */\nconst ifElseFn =\n  <V, R, T, F>(\n    condition: (val: V) => R,\n    onTrue: T | ((val: V) => T),\n    onFalse: F | ((val: V) => F)\n  ) =>\n  (val: V): R extends true ? T : R extends FalsyLike ? F : T | F =>\n    ifElse(\n      condition(val),\n      () =>\n        ifElse(\n          isFunction(onTrue),\n          () => (onTrue as any)(val),\n          () => onTrue\n        ),\n      () =>\n        ifElse(\n          isFunction(onFalse),\n          () => (onFalse as any)(val),\n          () => onFalse\n        )\n    )\n\nexport { ifElseFn }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { add } from './add.ts'\nimport { isNumber } from './isNumber.ts'\n\n/**\n * Increments its argument.\n *\n * @param val - Input `number` or `bigint`\n * @returns Incremented `val`\n *\n * @example\n * ```ts\n * inc(100) // 101\n * inc(10n) // 11n\n * ```\n *\n * @see Related to {@link dec}\n *\n * @public\n */\nconst inc: {\n  (val: number): number\n  (val: bigint): bigint\n} = (val: unknown) =>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (isNumber(val) ? add(val, 1) : add(val as bigint, 1n)) as any\n\nexport { inc }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { and } from './and.ts'\nimport { isArray } from './isArray.ts'\nimport { isLength0 } from './isLength0.ts'\nimport { isObject } from './isObject.ts'\nimport { isString } from './isString.ts'\nimport { keys } from './keys.ts'\nimport { or } from './or.ts'\nimport { Empty } from './types/index.ts'\n\n/**\n * Returns `true` if the given value is its type's empty value; otherwise `false`.\n *\n * @param val - Input any value\n * @returns The result of empty or not\n *\n * @remarks\n * The definition of Empty\n * - `''`\n * - `{}`\n * - `[]`\n *\n * @example\n * ```ts\n * isEmpty('') // true\n * isEmpty({}) // true\n * isEmpty([]) // true\n *\n * isEmpty('hello world') // false\n * isEmpty(1000) // false\n * ```\n *\n * @public\n */\nconst isEmpty = (val: unknown): val is Empty => {\n  if (or(isString(val), () => isArray(val))) return isLength0(val)\n  else if (isObject(val))\n    return and(isLength0(keys(val)), () => val.constructor === Object)\n  else return false\n}\n\nexport { isEmpty }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\nimport { JSON_OBJECT } from './constants/index.ts'\nimport { constructorName } from './constructorName.ts'\n\n/**\n * Whatever argument is JSON Object or not.\n *\n * @param val - Input any value\n * @returns if `val` is JSON Object `true` otherwise; `false`\n *\n * @example\n * ```ts\n * isJSONObject({ hoge: 'huga'}) // true\n * isJSONObject(Object()) // true\n * isJSONObject(new Object()) // true\n *\n * isJSONObject([]) // false\n * isJSONObject(new Set()) // false\n * ```\n *\n * @public\n */\nconst isJSONObject = (val: unknown): val is Record<PropertyKey, unknown> =>\n  constructorName(val) === JSON_OBJECT\n\nexport { isJSONObject }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { ifElse } from './ifElse.ts'\nimport { isArray } from './isArray.ts'\nimport { length } from './length.ts'\nimport { takeLast } from './takeLast.ts'\nimport { String2Array } from './types/index.ts'\n/**\n * Infer the last types.\n *\n * @typeParam T - `string` or any `array`\n *\n * @example\n * ```ts\n * // String\n * Last<string> // string\n * Last<''> // ''\n * Last<'hello'> // 'o'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * Last<[] | never[] | readonly [] | readonly never[]> // undefined\n * Last<['hello', 'world']> // 'world'\n * Last<string | number[]> // string | number\n * ```\n *\n * @category `Array` `String`\n *\n * @see Related to {@link First}\n *\n * @public\n */\ntype Last<T extends string | readonly unknown[]> = T extends ''\n  ? ''\n  : T extends string\n  ? String2Array<T> extends []\n    ? string\n    : [never, ...String2Array<T>][String2Array<T>['length']]\n  : T extends never[] | readonly never[]\n  ? undefined\n  : T extends unknown[] | readonly unknown[]\n  ? [never, ...T][T['length']]\n  : T extends string\n  ? string\n  : never\n\n/**\n * Returns the last element of the given list or string.\n *\n * @param val - `string` or any `array` object\n * @returns The last element of the `val`\n *\n * @example\n * ```ts\n * // String\n * last('hello') // 'o'\n * ```\n *\n * @example\n * ```ts\n * // Array\n * last('hello', 'new', 'world') // 'world'\n * last([]) // undefined\n * last(['one', 2, 3, 4]) // 4\n * ```\n *\n * @see Related to {@link first}\n *\n * @public\n */\nconst last = <T extends string | readonly unknown[]>(val: T): Last<T> =>\n  ifElse(\n    isArray(val),\n    () =>\n      ifElse(\n        length(val as unknown as unknown[]),\n        () => takeLast(1, val)[0] as Last<T>,\n        undefined as Last<T>\n      ),\n    () => takeLast(1, val) as Last<T>\n  )\n\nexport { last }\nexport type { Last }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Return lowercase string.\n *\n * @param val - Input string value\n * @returns Lowercase string\n *\n * @example\n * ```ts\n * toLower('Hello') // hello\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link upperCase}\n *\n * @public\n */\nconst lowerCase = <T extends string>(val: T): Lowercase<T> =>\n  val.toLowerCase() as Lowercase<T>\n\nexport { lowerCase }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { MapArray, mapArray as _mapArray } from './_/mapArray.ts'\nimport { MapObject, mapObject as _mapObject } from './_/mapObject.ts'\nimport { isArray } from './isArray.ts'\n/**\n * Takes a function, applies the function to each, and returns a result of the same shape.\n *\n * @param fn - The function to be called on every element of the input list.\n * @param list - The list to be iterated over.\n * @returns The result of `list.map(fn)` or object applied function to value\n *\n * @example\n * ```ts\n * const triple = (val: number):number => val * 3\n * map(triple, [1, 2, 3]) // [3, 6, 9]\n * map(triple, { tom: 1, john: 2, bob: 3 }) // { tom: 3, john: 6, bob: 9}\n * ```\n *\n * @category `Array` `Object`\n *\n * @public\n */\nconst map: {\n  <T extends readonly unknown[], U>(\n    fn: (value: T[number], index: number, list: T) => U,\n    list: T\n  ): MapArray<U, T>\n  <T extends { [k: string]: unknown }, U>(\n    fn: (val: T[keyof T], prop: keyof T, list: T) => U,\n    list: T\n  ): MapObject<U, T>\n} = (fn: any, list: any) =>\n  isArray(list) ? _mapArray(fn, list) : (_mapObject(fn, list) as any)\n\nexport { map }\nexport type { MapArray, MapObject }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\n/**\n * Infer `Array.map` types\n *\n * @typeParam T - Return types of function\n * @typeParam U - Input any array\n * @returns Mapped array types\n *\n * @example\n * ```ts\n * MapArray<void, any[]> // undefined[]\n * MapArray<1, any[]> // 1[]\n * MapArray<1, []> // []\n * ```\n *\n * @category `Array`\n *\n * @internal\n */\ntype MapArray<T, U> = U extends readonly [] | readonly never[]\n  ? []\n  : T extends void\n  ? undefined[]\n  : T[]\n\n/**\n * Takes a function, applies the function to each, and returns a result of the same shape.\n *\n * @param fn - The function to be called on every element of the input array.\n * @param array - The array to be iterated over\n * @returns The result of `array.map(fn)`\n *\n * @example\n * ```ts\n * const triple = (val: number):number => val * 3\n * mapArray(triple, [1, 2, 3]) // [3, 6, 9]\n * ```\n *\n * @category `Array`\n *\n * @internal\n */\nconst mapArray = <T extends readonly unknown[], U>(\n  fn: (value: T[number], index: number, array: T) => U,\n  array: T\n): MapArray<U, T> => array.map(fn as never) as MapArray<U, T>\n\nexport { mapArray }\nexport type { MapArray }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n\nimport { entries } from '../entries.ts'\n/**\n * Infer object applied return value to value\n *\n * @typeParam T - Return types of function\n * @typeParam U - Input any object\n * @returns The result of `{[k in keyof U]: T extends void ? undefined : T }`\n *\n * @example\n * ```ts\n * MapObject<void, {}> // {}\n * MapObject<void, { '': '' }> // { '': undefined }\n * MapObject<number, { hoge: 'huga', 1: 2 }> // { hoge: number, 1: number }\n * ```\n *\n * @category `Object`\n *\n * @internal\n */\ntype MapObject<T, U extends { [k: string]: unknown }> = {\n  [k in keyof U]: T extends void ? undefined : T\n}\n\n/**\n * Takes a function, applies the function to each, and returns a result of the same shape.\n *\n * @param fn - The function to be called on every element of the input object.\n * @param obj - The object to be iterated over\n * @returns The result of object applied function to value\n *\n * @example\n * ```ts\n * const triple = (val: number):number => val * 3\n * mapObject(triple, { tom: 1, john: 2, bob: 3 }) // { tom: 3, john: 6, bob: 9}\n * ```\n *\n * @category `Object`\n *\n * @internal\n */\nconst mapObject = <T extends { [k: string]: unknown }, U>(\n  fn: (val: T[keyof T], prop: keyof T, obj: T) => U,\n  obj: T\n): MapObject<U, T> =>\n  entries(obj).reduce((acc, [key, val]) => {\n    acc[key] = fn(val as T[keyof T], key, obj)\n    return acc\n  }, {} as { [k: string]: unknown }) as MapObject<U, T>\n\nexport { mapObject }\nexport type { MapObject }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { N } from './N.ts'\nimport { AnyFn } from './types/index.ts'\n/**\n * Returns the function as is with return value `!`.\n *\n * @param val - Input any `function`\n * @returns The result is function what return value with `!`\n *\n * @example\n * ```ts\n * not(() => true)() // false\n * const gt10 = (val: number) => val > 10\n * not(gt10)(11) // false\n * ```\n *\n * @public\n */\n\nconst not =\n  <T extends AnyFn>(fn: T) =>\n  (...val: Parameters<T>): boolean =>\n    N(fn(...val))\n\nexport { not }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { AnyFn, Arity1Fn } from './types/index.ts'\n\n/**\n * Performs left-to-right function composition.\n *\n * @param functions - Multi any functions\n * @returns A `function` what argument is `function[0]` argument\n *\n * @remarks\n * The first argument may have any arity; the remaining arguments must be unary.\n *\n * @example\n * ```ts\n * const fn = pipe(add , inc)\n * fn(1, 1) // 3\n * ```\n *\n * @public\n */\nconst pipe: Pipe =\n  (...args: AnyFn[]) =>\n  (...initialArg: unknown[]) =>\n    args.reduce(\n      (acc, cur, index) => cur(...(index === 0 ? acc : [acc])) as unknown[],\n      initialArg\n    )\n\nexport { pipe }\n\ntype Pipe = {\n  <F1 extends AnyFn>(fn1: F1): (...initialArg: Parameters<F1>) => ReturnType<F1>\n\n  <F1 extends AnyFn, F2 extends Arity1Fn<ReturnType<F1>>>(...fn1: [F1, F2]): (\n    ...initialArg: Parameters<F1>\n  ) => ReturnType<F2>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>\n  >(\n    ...fn1: [F1, F2, F3]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F3>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>\n  >(\n    ...fn1: [F1, F2, F3, F4]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F4>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F5>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F6>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F7>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F8>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F9>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F10>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F11>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F12>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F13>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>,\n    F14 extends Arity1Fn<ReturnType<F13>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F14>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>,\n    F14 extends Arity1Fn<ReturnType<F13>>,\n    F15 extends Arity1Fn<ReturnType<F14>>\n  >(\n    ...fn1: [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F15>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>,\n    F14 extends Arity1Fn<ReturnType<F13>>,\n    F15 extends Arity1Fn<ReturnType<F14>>,\n    F16 extends Arity1Fn<ReturnType<F15>>\n  >(\n    ...fn1: [\n      F1,\n      F2,\n      F3,\n      F4,\n      F5,\n      F6,\n      F7,\n      F8,\n      F9,\n      F10,\n      F11,\n      F12,\n      F13,\n      F14,\n      F15,\n      F16\n    ]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F16>\n\n  <\n    F1 extends AnyFn,\n    F2 extends Arity1Fn<ReturnType<F1>>,\n    F3 extends Arity1Fn<ReturnType<F2>>,\n    F4 extends Arity1Fn<ReturnType<F3>>,\n    F5 extends Arity1Fn<ReturnType<F4>>,\n    F6 extends Arity1Fn<ReturnType<F5>>,\n    F7 extends Arity1Fn<ReturnType<F6>>,\n    F8 extends Arity1Fn<ReturnType<F7>>,\n    F9 extends Arity1Fn<ReturnType<F8>>,\n    F10 extends Arity1Fn<ReturnType<F9>>,\n    F11 extends Arity1Fn<ReturnType<F10>>,\n    F12 extends Arity1Fn<ReturnType<F11>>,\n    F13 extends Arity1Fn<ReturnType<F12>>,\n    F14 extends Arity1Fn<ReturnType<F13>>,\n    F15 extends Arity1Fn<ReturnType<F14>>,\n    F16 extends Arity1Fn<ReturnType<F15>>,\n    F17 extends Arity1Fn<ReturnType<F16>>\n  >(\n    ...fn1: [\n      F1,\n      F2,\n      F3,\n      F4,\n      F5,\n      F6,\n      F7,\n      F8,\n      F9,\n      F10,\n      F11,\n      F12,\n      F13,\n      F14,\n      F15,\n      F16,\n      F17\n    ]\n  ): (...initialArg: Parameters<F1>) => ReturnType<F17>\n}\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Returns a new list with the given value at the front, followed by the contents of the list.\n *\n * @param val - The value to add to the front of the new list\n * @param list - The list of elements to add a new item to\n * @returns The result of `[val, ...list]`\n *\n * @example\n * ```ts\n * prepend('Tom', ['hello']) // ['Tom', 'hello']\n * prepend('Tom', []) // ['Tom']\n * prepend(['Tom'], ['hello', 'world']) // [['Tom'], 'hello', 'world']\n * ```\n *\n * @category `Array`\n *\n * @see Related to {@link append}\n *\n * @public\n */\nconst prepend = <T, U>(val: T, list: U[]): (T | U)[] => [val, ...list]\nexport { prepend }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { first } from './first.ts'\nimport { ifElse } from './ifElse.ts'\nimport { isNumber } from './isNumber.ts'\nimport { isUndefined } from './isUndefined.ts'\nimport { multiply } from './multiply.ts'\n/**\n * Multiplies together all the elements of a list.\n *\n * @param val - list An array of numbers\n * @returns The product of all the numbers in the list\n *\n * @example\n * ```ts\n * product([1, 2, 3, 4, 5]) // 120\n * product([1n, 2n, 3n, 4n, 5n]) //120n\n * product([]) // 0\n * ```\n *\n * @category `Math`\n *\n * @public\n */\nconst product: {\n  (val: []): 0\n  (val: number[]): number\n  (val: bigint[]): bigint\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: any) => {\n  const head = first(val) as number | bigint | undefined\n  return ifElse(isUndefined(head), 0, () => {\n    const init = ifElse(isNumber(head), 1, 1n)\n    return val.reduce(multiply, init)\n  })\n}\n\nexport { product }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { prop } from './_/prop.ts'\n\n/**\n * Returns a function that when supplied an object returns the indicated property of that object, if it exists.\n *\n * @param val - Input property key\n * @param obj - The object to query\n * @returns The result of safety `obj[val]` or `obj[val[0]][val[1]][val[...x]]`\n *\n * @example\n * ```ts\n * props('x', { x: 'hello' }) // 'hello'\n * props(1, { 1: 100 }) // 100\n * props('x', {}) // undefined\n * ```\n *\n * @category `Object`\n *\n * @see Related to {@link has}\n *\n * @public\n */\nconst props = <\n  T extends string | number,\n  U extends Record<PropertyKey, unknown>\n>(\n  val: T,\n  obj: U\n): U extends Record<T, unknown> ? U[T] : undefined => prop(val, obj)\nexport { props }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { has } from '../has.ts'\nimport { ifElse } from '../ifElse.ts'\n/**\n * Returns a function that when supplied an object returns the indicated property of that object, if it exists.\n *\n * @param val - input property key\n * @param obj - The object to query\n * @returns The result of safety `obj[val]`\n *\n * @example\n * ```ts\n * prop('x', { x: 'hello' }) // 'hello'\n * prop(1, { 1: 100 }) // 100\n * prop('x', {}) // undefined\n * ```\n *\n * @internal\n */\nconst prop = <\n  T extends string | number,\n  U extends Record<PropertyKey, unknown>\n>(\n  val: T,\n  obj: U\n): U extends Record<T, unknown> ? U[T] : undefined =>\n  ifElse(has(val, obj), () => obj[val], undefined) as U extends Record<\n    T,\n    unknown\n  >\n    ? U[T]\n    : undefined\nexport { prop }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Infer the replacement value.\n *\n * @typeParam T - Original string\n * @typeParam From - Holds the pattern string that need to replace\n * @typeParam To - Holds the replacement string\n *\n * @example\n * ```ts\n * Replace<'hello Tom', 'Tom', 'Bob'> // 'hello Bob'\n * Replace<'hogehoge', 'hoge', 'fuga'> // 'fugahoge'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link ReplaceAll}\n *\n * @public\n */\ntype Replace<\n  T extends string,\n  From extends string,\n  To extends string\n> = From extends '' | To\n  ? T\n  : T extends `${infer L}${From}${infer R}`\n  ? `${L}${To}${R}`\n  : T\n\n/**\n * Replaces matches for `from` in string with `to`.\n *\n * @param from - Holds the pattern string that need to replace\n * @param to - Holds the replacement string\n * @param val - Original string\n * @returns The result of `val.replace(from, to)`\n *\n * @example\n * ```ts\n * replace('hello Tom', 'Tom', 'Bob') // 'hello Bob'\n * replace('hogehoge', 'hoge', 'fuga') // 'fugahoge'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link replaceAll}\n *\n * @public\n */\nconst replace = <From extends string, To extends string, T extends string>(\n  from: From,\n  to: To,\n  val: T\n): Replace<T, From, To> => val.replace(from, to) as Replace<T, From, To>\n\nexport { replace }\nexport type { Replace }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Infer the all replacement value.\n *\n * @typeParam T - Original string\n * @typeParam From - Holds the pattern string that need to replace\n * @typeParam To - Holds the replacement string\n *\n * @example\n * ```ts\n * ReplaceAll<'hello Tom', 'Tom', 'Bob'> // 'hello Bob'\n * ReplaceAll<'hogehoge', 'hoge', 'fuga'> // 'fugafuga'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link Replace}\n *\n * @public\n */\ntype ReplaceAll<\n  T extends string,\n  From extends string,\n  To extends string\n> = From extends '' | To\n  ? T\n  : T extends `${infer L}${From}${infer R}`\n  ? `${L}${ReplaceAll<`${To}${R}`, From, To>}`\n  : T\n\n/**\n * Replaces all matches for `from` in string with `to`.\n *\n * @param from - Holds the pattern string that need to replace\n * @param to - Holds the replacement string\n * @param val - Original string\n * @returns The result of `val.replaceAll(from, to)`\n *\n * @example\n * ```ts\n * replaceAll('hello Tom', 'Tom', 'Bob') // 'hello Bob'\n * replaceAll('hogehoge', 'hoge', 'fuga') // 'fugafuga'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link replace}\n *\n * @public\n */\nconst replaceAll = <From extends string, To extends string, T extends string>(\n  from: From,\n  to: To,\n  val: T\n): ReplaceAll<T, From, To> =>\n  val.replaceAll(from, to) as ReplaceAll<T, From, To>\n\nexport { replaceAll }\nexport type { ReplaceAll }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { isString } from './isString.ts'\n\n/**\n * Returns a new list or string with the elements or characters in reverse order.\n *\n * @param val - list or string characters\n * @returns New list or string characters in reverse order\n *\n * @example\n * ```ts\n * // String\n * reverse('hello') // 'olleh'\n * ```\n *\n * @example\n * ```ts\n * // Any Array\n * reverse(['hello', 'new', 'world']) // ['world', 'new', 'hello']\n * reverse([0, {}, []]) // [[], {}, 0]\n * ```\n *\n * @category `Array`\n *\n * @public\n */\nconst reverse: {\n  (val: string): string\n  (val: ''): ''\n  <T extends []>(val: T): []\n  <T extends unknown[]>(val: T): T\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: string): any =>\n  isString(val) ? val.split('').reverse().join('') : [...val].reverse()\n\nexport { reverse }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { ifElse } from './ifElse.ts'\nimport { isString } from './isString.ts'\n\ntype StartsWith<T extends string | undefined = undefined> = T extends undefined\n  ? (target: string) => ReturnType<string['startsWith']>\n  : ReturnType<string['startsWith']>\n\n/**\n * Checks if a string starts with the provided substring.\n *\n * @param val - search string\n * @param target - target string\n * @returns The result of `target.startsWith(val)`\n *\n * @example\n * ```ts\n * // Basic\n * startsWith('hello', 'hello world') // true\n * startsWith('good', 'hello world') // false\n * ```\n *\n * @example\n * ```ts\n * // Curry\n * const startWithSlash = startsWith('/')\n * startWithSlash('/path/to') // true\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link endsWith}\n *\n * @public\n */\nconst startsWith = <T extends string, U extends string | undefined = undefined>(\n  val: T,\n  target?: U\n): StartsWith<U> =>\n  ifElse(\n    isString(target),\n    () => (target as string).startsWith(val) as StartsWith<U>,\n    () => ((_target: string) => startsWith(val, _target)) as StartsWith<U>\n  )\n\nexport { startsWith }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { add } from './add.ts'\nimport { first } from './first.ts'\nimport { ifElse } from './ifElse.ts'\nimport { isNumber } from './isNumber.ts'\nimport { isUndefined } from './isUndefined.ts'\n/**\n * Adds together all the elements of a list.\n *\n * @param val - list An array of numbers\n * @returns The sum of all the numbers in the list\n *\n * @example\n * ```ts\n * sum([1, 2, 3, 4, 5]) // 15\n * sum([1n, 2n, 3n, 4n, 5n]) // 15n\n * sum([]) // 0\n * ```\n *\n * @category `Math`\n *\n * @public\n */\nconst sum: {\n  (val: []): 0\n  (val: number[]): number\n  (val: bigint[]): bigint\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} = (val: any) => {\n  const head = first(val) as number | bigint | undefined\n  return ifElse(isUndefined(head), 0, () => {\n    const init = ifElse(isNumber(head), 0, 0n)\n    return val.reduce(add, init)\n  })\n}\n\nexport { sum }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Arity1Fn } from './types/index.ts'\n\n/**\n * Runs the given function with the supplied value, then returns the value.\n *\n * @param fn - The function to call with `val`. The return value of fn will be thrown away.\n * @returns The result of `(val) => fn(val)`\n *\n * @example\n * ```ts\n * tap(console.log)('hello') // hello\n * // log: hello\n * ```\n *\n * @public\n */\nconst tap =\n  <T>(fn: Arity1Fn<T>) =>\n  <R extends T>(val: R): R => {\n    fn(val)\n    return val\n  }\n\nexport { tap }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { TrimLeft } from './trimLeft.ts'\nimport { TrimRight } from './trimRight.ts'\n\n/**\n * Infer the trimmed string.\n *\n * @typeParam T - Any string\n * @returns Trimmed string\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * Trim<'\\t\\n hello \\t\\n'> // 'hello'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link TrimLeft} {@link TrimRight}\n *\n * @public\n */\ntype Trim<T extends string> = TrimLeft<TrimRight<T>>\n\n/**\n * Removes whitespace from both ends of the string.\n *\n * @param val - `string` to trim\n * @returns The result of `val.trim()`\n *\n * @example\n * ```ts\n * trim('   hello   ') // 'hello'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link trimLeft} {@link trimRight}\n *\n * @public\n */\nconst trim = <T extends string>(val: T): Trim<T> => val.trim() as Trim<T>\n\nexport { trim }\nexport type { Trim }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Space } from './types/index.ts'\n\n/**\n * Infer the string with the left ends of trimmed.\n *\n * @returns String left ends of trimmed\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * TrimLeft<' \\n\\thello'> // 'hello'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link TrimRight} {@link Trim}\n *\n * @public\n */\ntype TrimLeft<T extends string> = T extends `${Space}${infer R}`\n  ? TrimLeft<R>\n  : T\n\n/**\n * Removes space from left ends of the string.\n *\n * @param val - input string\n * @returns The result of `val.trimLeft()`\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * trimLeft('   hello') // 'hello'\n * trimLeft(' \\n\\thello') // 'hello'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link trimRight} {@link trim}\n *\n * @public\n */\nconst trimLeft = <T extends string>(val: T): TrimLeft<T> =>\n  val.trimLeft() as TrimLeft<T>\n\nexport { trimLeft }\nexport type { TrimLeft }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { Space } from './types/index.ts'\n\n/**\n * Infer the string with the right ends of trimmed.\n *\n * @typeParam T - Any string\n * @returns String right ends of trimmed\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * TrimRight<'hello \\n\\t'> // 'hello'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link TrimLeft} {@link Trim}\n *\n * @public\n */\ntype TrimRight<T extends string> = T extends `${infer R}${Space}`\n  ? TrimRight<R>\n  : T\n\n/**\n * Removes space from right ends of the string.\n *\n * @param val - input string\n * @returns The result of `val.trimRight()`\n *\n * @remarks\n * The definition of space\n * - `''`\n * - `\\n`\n * - `\\t`\n *\n * @example\n * ```ts\n * trimRight('hello   ') // 'hello'\n * trimRight('hello \\n\\t') // 'hello'\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link trimLeft} {@link trim}\n *\n * @public\n */\nconst trimRight = <T extends string>(val: T): TrimRight<T> =>\n  val.trimRight() as TrimRight<T>\n\nexport { trimRight }\nexport type { TrimRight }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { advance } from './advance.ts'\nimport { ifElse } from './ifElse.ts'\nimport { isFunction } from './isFunction.ts'\nimport { isUndefined } from './isUndefined.ts'\nimport { N } from './N.ts'\nimport { AnyFn } from './types/index.ts'\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned function evaluates the `tryer`; if it does not throw, it simply returns the result. If the `tryer` does throw, the returned function evaluates the catcher function and returns its result.\n *\n * @param tryer - The function that may throw.\n * @param catcher - The function that will be evaluated if tryer throws.\n * @returns - The result of `try { tryer() } catch(e) { catcher(e) }`\n *\n * @example\n * ```ts\n * tryCatch(() => { throw Error('error') }) // Error('error')\n * tryCatch(() => { throw Error('error') }, 0) // 0\n * tryCatch(() => { throw Error('error') }, (e: Error) => e.message ) // 'error'\n * ```\n *\n * @category `Logic`\n *\n * @public\n */\nconst tryCatch = <R, E, P = unknown>(\n  tryer: AnyFn<any, R>,\n  catcher?: E | AnyFn<P, E>\n): R | E => {\n  try {\n    return advance(tryer)\n  } catch (e) {\n    return ifElse(\n      isFunction(catcher),\n      () => (catcher as AnyFn<P, E>)(e),\n      () => ifElse(N(isUndefined(catcher)), catcher, e)\n    )\n  }\n}\n\nexport { tryCatch }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { equal } from './equal.ts'\nimport { ifElse } from './ifElse.ts'\n\n/**\n * Returns a new `Array` containing only one copy of each element in the original array. `equal` is used to determine equality.\n *\n * @param val - Input any `array`\n * @returns The list of unique items\n *\n * @example\n * ```ts\n * uniq([1, 2, 1, 1]) // [1, 2]\n * uniq([{}, {}, [], []]) // [{}, []]\n * uniq([[1, 2, 3], [1, 2, 3]]) // [[1, 2, 3]]\n * ```\n *\n * @category `Array`\n *\n * @see Related to {@link equal}\n *\n * @public\n */\nconst uniq = <T extends unknown>(val: readonly T[]): T[] =>\n  Array.from(new Set(val)).reduce((acc, cur) => {\n    const result = acc.some((val) => equal(cur, val))\n    return ifElse(result, acc, () => [...acc, cur])\n  }, [] as T[])\n\nexport { uniq }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\n/**\n * Return uppercase string.\n *\n * @param val - Input string value\n * @returns Uppercase string\n *\n * @example\n * ```ts\n * toUpper('Hello') // HELLO\n * ```\n *\n * @category `String`\n *\n * @see Related to {@link lowerCase}\n *\n * @public\n */\nconst upperCase = <T extends string>(val: T): Uppercase<T> =>\n  val.toUpperCase() as Uppercase<T>\n\nexport { upperCase }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { values as _values } from './constants/index.ts'\n\n/**\n * Returns an array of values of the enumerable properties of an object.\n *\n * @param val - `Object` that contains the properties and methods\n * @returns The result of `Object.values(val)`\n *\n * @remarks\n * The order of the output array is not guaranteed to be consistent across different platforms.\n *\n * @example\n * ```ts\n * // Object\n * values({}) // []\n * values({ 'a': 'b' }) // ['b']\n * values({ 0: 'hello', 1: 'world' }) // ['hello', 'world']\n * ```\n *\n * @example\n * ```ts\n * // Array\n * values([]) // []\n * values(['hello', 'world']) // ['hello', 'world']\n * ```\n *\n * @category `Array` `Object`\n *\n * @see Related to {@link keys} {@link entries}\n *\n * @public\n */\nconst values = <T extends unknown>(\n  val: Record<PropertyKey, T> | ArrayLike<T>\n): T[] => _values(val)\n\nexport { values }\n","// Copyright 2021-present the Fonction authors. All rights reserved. MIT license.\nimport { advance } from './advance.ts'\nimport { N } from './N.ts'\nimport { FalsyLike } from './types/index.ts'\nimport { AnyFn } from './types/index.ts'\n\n/**\n * Returns true if one of the arguments is truthy and the other is falsy; otherwise false.\n *\n * @param a - The first input any value\n * @param b - The second input any value\n * @returns The result of `!a !== !b` (if argument is function, return value)\n *\n * @example\n * ```ts\n * xor(true, false) // true\n * xor(false, true) // true\n * xor(true, true) // false\n * xor(false, false) // false\n * xor(() => 1, () => 0) // true\n * xor(() => 0, () => 0) // false\n * ```\n *\n * @category `Logic`\n *\n * @see Related to {@link and} {@link or}\n *\n * @public\n */\nconst xor = <T, U>(\n  a: T | AnyFn<any, T>,\n  b: U | AnyFn<any, U>\n): T extends FalsyLike ? (U extends FalsyLike ? false : boolean) : boolean =>\n  (N(advance(a)) !== (N(advance(b)) as unknown)) as T extends FalsyLike\n    ? U extends FalsyLike\n      ? false\n      : boolean\n    : boolean\nexport { xor }\n"],"names":["curry","fn","curried","t","length","bind","_arrayLikeToArray","arr","len","i","arr2","Array","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","_toConsumableArray","isArray","arrayWithoutHoles","iter","Symbol","iterator","iterableToArray","unsupportedIterableToArray","TypeError","nonIterableSpread","_slicedToArray","arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","iterableToArrayLimit","nonIterableRest","_typeof","obj","isTupleFactory","a","b","and","instanceofFactory","isBothArray","isBothFunction","isFunction","isBothJSONObject","isJSONObject","isBothPrimitive","isPrimitive","isBothObjectExcludeJSON","val","isObject","N","isBothDate","Date","isBothRegExp","RegExp","isBothError","Error","isBothMap","Map","isBothSet","Set","isBothURL","URL","isBothArrayBuffer","ArrayBuffer","isBothURLSearchParams","URLSearchParams","isBothTypedArray","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array","some","W","e","E","add","NN","ifElse","onTrue","onFalse","advance","lte","to","entries","keys","values","hasOwnProperty","isNull","isUndefined","or","isNil","constructorName","isNumber","subtract","isNaN","Number","divide","isString","_entries","equal","_equal","lt","take","howMany","first","has","props","isLength0","isBigint","isBoolean","isNill","isSymbol","is","tail","Infinity","hasPath","path","key","rest","_hasPath","_has","includes","collection","_keys","takeLast","multiply","regExp","list","size","array","reduce","acc","_","index","endsWith","target","_target","flat","condition","toLowerCase","map","_mapArray","_mapObject","args","initialArg","cur","head","init","prop","replace","replaceAll","split","reverse","join","startsWith","trim","trimLeft","trimRight","tryer","catcher","result","toUpperCase","_values"],"mappings":"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"}