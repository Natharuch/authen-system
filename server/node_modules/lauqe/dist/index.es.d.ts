import { Primitive } from "fonction";
/**
 * Returns `true` if its arguments are equivalent, otherwise `false`. Handles cyclical data structures.
 *
 * @param a - Any value
 * @param b - Any value
 * @returns Return `true` if the reference memory is the same or the property members and their values are the same
 *
 * @example
 * ```ts
 * equals(-0, 0) // true
 * equals(NaN, NaN) // true
 * equals([[[[]]]], [[[[]]]]) // true
 * equals({ a: { b: [1, 2, 3]}}, { a: { b: [1, 2, 3]}}) // true
 * ```
 *
 * @public
 */
declare const equal: <T, U extends T>(a: T, b: U) => boolean;
/**
 * Returns `true` if its primitive arguments are equivalent; otherwise `false`.
 * @param a - Any primitive value
 * @param b - Any primitive value
 * @returns The result of `Object.is(a, b) || a === b`
 *
 * @example
 * ```ts
 * equalPrimitive(NaN, NaN)) // true
 * equalPrimitive(+0, -0)) // true
 * ```
 * @beta
 */
declare const equalPrimitive: <T extends Primitive, U extends T>(a: T, b: U) => boolean;
/**
 * Returns `true` if its `Date` arguments are equivalent; otherwise `false`.
 * @param a - Any `Date` object
 * @param b - Any `Date` object
 * @returns The result of `a.getTime() === b.getTime()`
 *
 * @example
 * ```ts
 * equalDate(new Date(0), new Date(0)) // true
 * equalDate(new Date("1999/1/1 00:00:01"), new Date("1999/1/1") // false
 * ```
 * @beta
 */
declare const equalDate: (a: Date, b: Date) => boolean;
/**
 * Returns `true` if its `Error` arguments are equivalent; otherwise `false`.
 * @param a - Any `Error` and its Derived object
 * @param b - Any `Error` and its Derived object
 * @returns `true` if the constructor and the error message are the same;otherwise false
 *
 * @example
 * ```ts
 * equalError(Error('test'), Error('test')) // true
 * equalError(AggregateError([TypeError('test')]), AggregateError([TypeError('test')])) // true
 * equalError(Error('test'), Error('hello')) // false
 * equalError(Error('test'), TypeError('test')) // false
 * ```
 * @beta
 */
declare const equalError: (a: Error, b: Error) => boolean;
/**
 * Returns `true` if its `ArrayBuffer` arguments are equivalent; otherwise `false`.
 * @param a - Any `ArrayBuffer` object
 * @param b - Any `ArrayBuffer` object
 * @returns The result of `a.byteLength === b.byteLength`
 *
 * @example
 * ```ts
 * equalArrayBuffer(new ArrayBuffer(0), new ArrayBuffer(0)) // true
 * equalArrayBuffer(new ArrayBuffer(0), new ArrayBuffer(1)) // false
 * ```
 * @beta
 */
declare const equalArrayBuffer: (a: ArrayBuffer, b: ArrayBuffer) => boolean;
/**
 * Returns `true` if its `URL` arguments are equivalent; otherwise `false`.
 * @param a - Any `URL` object
 * @param b - Any `URL` object
 * @returns The result of `a.toString() === b.toString()`
 *
 * @example
 * ```ts
 * equalURL(new URL('https://google.com', 'https://google.com')) // true
 * equalURL(new URL('https://google.com', 'https://google.com/')) // true
 * ```
 * @beta
 */
declare const equalURL: (a: URL, b: URL) => boolean;
export { equal, equalArrayBuffer, equalDate, equalError, equalPrimitive, equalURL };
//# sourceMappingURL=index.es.d.ts.map