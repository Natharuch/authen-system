import { Empty, AnyFn, Primitive } from "fonction";
/**
 * Create length validator of greater then `val`. It's exclusive.
 *
 * @param val - `Number` of check length
 * @returns Function what validate length is greater than `val` or not
 *
 * @example
 * ```ts
 * const gtLength3 = gtLength(3)
 * gtLength3('bad') // false
 * gtLength3(['hello', 'world', 'tom']) // false
 * gtLength3('good') // true
 * ```
 *
 * @beta
 */
declare const gtLength: (val: number) => (val: string | unknown[]) => boolean;
/**
 * Create length validator of greater equal then `val`. It's inclusive.
 *
 * @param val - `Number` of check length
 * @returns Function what validate length is greater equal than `val` or not
 *
 * @example
 * ```ts
 * const gteLength5 = gteLength(5)
 * gteLength5('good') // false
 * gteLength5('hello') // true
 * gteLength5([1, 2, 3, 4, 5]) // true
 * ```
 *
 * @beta
 */
declare const gteLength: (val: number) => (val: string | unknown[]) => boolean;
/**
 * Create length validator of less then `val`. It's exclusive.
 *
 * @param val - `Number` of check length
 * @returns Function what validate length is less than `val` or not
 *
 * @example
 * ```ts
 * const ltLength3 = ltLength(3)
 * gtLength3('bad') // false
 * gtLength3(['hello', 'world', 'tom']) // false
 * gtLength3('to') // true
 * ```
 *
 * @beta
 */
declare const ltLength: (val: number) => (val: string | unknown[]) => boolean;
/**
 * Create length validator of less equal then `val`. It's inclusive.
 *
 * @param val - `Number` of check length
 * @returns Function what validate length is less equal than `val` or not
 *
 * @example
 * ```ts
 * const lteLength5 = lteLength(5)
 * lteLength5('good') // true
 * lteLength5('hello') // true
 * lteLength5([1, 2, 3, 4, 5]) // true
 * ```
 *
 * @beta
 */
declare const lteLength: (val: number) => (val: string | unknown[]) => boolean;
// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.
/**
 * Whatever argument is `Array` or not.
 *
 * @param val - Input any value
 * @returns The result of `Array.isArray(val)`
 *
 * @example
 * ```ts
 * isArray([]) // true
 * isArray(['hello', 'world']) // true
 * isArray({}) // false
 * ```
 *
 * @public
 */
declare const isArray: (val: unknown) => val is unknown[];
/**
 * Whatever argument is type of `bigint` or not.
 *
 * @param val - input any value
 * @returns The result of `typeof val === 'bigint'`
 *
 * @example
 * ```ts
 * isBigint(1n) // true
 * isBigint(1000) // false
 * ```
 *
 * @public
 */
declare const isBigint: (val: unknown) => val is bigint;
/**
 * Whatever argument is type of `boolean` or not.
 *
 * @param val - Input any value
 * @returns The result of `typeof val === 'boolean'`
 *
 * @example
 * ```ts
 * isBoolean(true) // true
 * isBoolean('hello') // false
 * ```
 *
 * @public
 */
declare const isBoolean: (val: unknown) => val is boolean;
/**
 * Returns `true` if the given value is its type's empty value; otherwise `false`.
 *
 * @param val - Input any value
 * @returns The result of empty or not
 *
 * @remarks
 * The definition of Empty
 * - `''`
 * - `{}`
 * - `[]`
 *
 * @example
 * ```ts
 * isEmpty('') // true
 * isEmpty({}) // true
 * isEmpty([]) // true
 *
 * isEmpty('hello world') // false
 * isEmpty(1000) // false
 * ```
 *
 * @public
 */
declare const isEmpty: (val: unknown) => val is Empty;
/**
 * Whatever argument is type of `function` or not.
 *
 * @param val - Input any value
 * @returns The result of `typeof val === 'function'`
 *
 * @example
 * ```ts
 * isFunction(function) // true
 * isFunction('hello') // false
 * ```
 *
 * @public
 */
declare const isFunction: (val: unknown) => val is AnyFn<any, unknown>;
/**
 * Whatever argument is JSON Object or not.
 *
 * @param val - Input any value
 * @returns if `val` is JSON Object `true` otherwise; `false`
 *
 * @example
 * ```ts
 * isJSONObject({ hoge: 'huga'}) // true
 * isJSONObject(Object()) // true
 * isJSONObject(new Object()) // true
 *
 * isJSONObject([]) // false
 * isJSONObject(new Set()) // false
 * ```
 *
 * @public
 */
declare const isJSONObject: (val: unknown) => val is Record<PropertyKey, unknown>;
/**
 * Whatever argument length is `0` or not.
 *
 * @param val - Input any value
 * @returns The result of `!val.length` (if not have `length` property, `false`)
 *
 * @example
 * ```ts
 * isLength0([]) // true
 * isLength0([]) // true
 * isLength0('hello') // false
 * isLength0(undefined) // false
 * ```
 *
 * @beta
 */
declare const isLength0: (val: unknown) => boolean;
/**
 * Whatever argument is type of `undefined` or `null`.
 *
 * @param val - Input any value
 * @returns The result of type of `val` is `undefined` or `null`
 *
 * @example
 * ```ts
 * isNil(undefined) // true
 * isNil(null) // true
 * isNil([]) // false
 * ```
 *
 * @public
 *
 */
declare const isNil: (val: unknown) => val is null | undefined;
/**
 * Whatever argument is type of `null` or not.
 *
 * @param val - Input any value
 * @returns The result of `val === null`
 *
 * @example
 * ```ts
 * isNull(null) // true
 * isNull(undefined) // false
 * ```
 *
 * @public
 */
declare const isNull: (val: unknown) => val is null;
/**
 * Whatever argument is type of `number` or not.
 *
 * @param val - Input any value
 * @returns The result of `typeof val === 'number'`
 *
 * @example
 * ```ts
 * isNumber(0) // true
 * isNumber('hello') // false
 * ```
 *
 * @public
 */
declare const isNumber: (val: unknown) => val is number;
/**
 * Whatever argument is type of `object` or not.
 *
 * @param val - Input any value
 * @returns The result of object or not
 *
 * @remarks
 * Definition of Object
 *
 * Not Primitive
 *
 * @remarks
 * Definition of Primitive
 * - `string`
 * - `number`
 * - `bigint`
 * - `boolean`
 * - `symbol`
 * - `undefined`
 * - `null`
 *
 *
 * @example
 * ```ts
 * isObject([]) // true
 * isObject('hello') // false
 * ```
 *
 * @public
 */
declare const isObject: (val: unknown) => val is Record<any, any>;
/**
 * Whatever argument is `primitive` or not.
 *
 * @param val - Input any value
 * @returns The result of primitive or not
 *
 * @remarks
 * Definition of Primitive
 * - `string`
 * - `number`
 * - `bigint`
 * - `boolean`
 * - `symbol`
 * - `undefined`
 * - `null`
 *
 * @example
 * ```ts
 * isPrimitive(true) // true
 * isPrimitive([]) // false
 * ```
 *
 * @public
 */
declare const isPrimitive: (val: unknown) => val is Primitive;
/**
 * Whatever argument is type of `string` or not.
 *
 * @param val - Input any value
 * @returns The result of `typeof val === 'string'`
 *
 * @example
 * ```ts
 * isString('hello world') // true
 * isString(1000) // false
 * ```
 *
 * @public
 */
declare const isString: (val: unknown) => val is string;
/**
 * Whatever argument is type of `symbol` or not.
 *
 * @param val - Input any value
 * @returns The result of `typeof val === 'symbol'`
 *
 * @example
 * ```ts
 * isSymbol(Symbol('hello')) // true
 * isSymbol('hello') // false
 * ```
 *
 * @public
 */
declare const isSymbol: (val: unknown) => val is symbol;
/**
 * Whatever argument is type of `undefined` or not.
 *
 * @param val - Input any value
 * @returns The result of `typeof val === 'undefined'`
 *
 * @example
 * ```ts
 * isUndefined(undefined) // true
 * isUndefined('hello') // false
 * ```
 *
 * @public
 */
declare const isUndefined: (val: unknown) => val is undefined;
/**
 * Whatever argument is Lower case `string` or not.
 *
 * @param val - Any `string`
 * @returns The result of `val.toLowerCase() === val`
 *
 * @example
 * ```ts
 * isLowerCase('hello world') // true
 * isLowerCase('Hello world') // false
 * ```
 *
 * @beta
 */
declare const isLowerCase: (val: string) => boolean;
// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.
/**
 * Whatever argument is Upper case `string` or not.
 *
 * @param val - Any `string`
 * @returns The result of `val.toUpperCase() === val`
 *
 * @example
 * ```ts
 * isUpperCase('HELLO WORLD') // true
 * isUpperCase('hello world') // false
 * ```
 *
 * @beta
 */
declare const isUpperCase: (val: string) => boolean;
/**
 * Whatever val is trimmable or not.
 *
 * @param val - Any `string`
 * @returns The result of `trim(val) !== val`
 *
 * @example
 * ```ts
 * isTrimmable(' test') // true
 * isTrimmable('test ') // true
 * isTrimmable(' test ') // true
 * ```
 */
declare const isTrimmable: (val: string) => boolean;
/**
 * Whatever val is left side trimmable or not.
 *
 * @param val - Any `string`
 * @returns The result of `trimLeft(val) !== val`
 *
 * @example
 * ```ts
 * isLeftTrimmable('test ') // false
 * isLeftTrimmable(' test') // true
 * isLeftTrimmable(' test ') // true
 * ```
 */
declare const isLeftTrimmable: (val: string) => boolean;
/**
 * Whatever val is right side trimmable or not.
 *
 * @param val - Any `string`
 * @returns The result of `trimRight(val) !== val`
 *
 * @example
 * ```ts
 * isRightTrimmable(' test') // false
 * isRightTrimmable('test ') // true
 * isRightTrimmable(' test ') // true
 * ```
 */
declare const isRightTrimmable: (val: string) => boolean;
type ValueOrReturnType<T> = T extends AnyFn ? ReturnType<T> : T;
/**
 * Iteration of validators that returns `true` when everything are `true`.
 * @param validators - Any number of validators that return a `boolean`
 * @returns - A function that takes an argument of `validators[0]`
 *
 * @remarks
 * Never throw an error. Returns `false` on error.
 *
 * @example
 * ```ts
 * const isValidPassword = everyTrue(isString, gtLength(8), ltLength(30))
 * isValidPassword('this-is-valid-password') // true
 * ```
 *
 * @example
 * ```ts
 * const dangerValidation = everyTrue((val: any) => val.size === 1)
 * // null.size will occur TypeError but catch and return false
 * dangerValidation(null) // false
 * ```
 *
 * @public
 */
declare const everyTrue: <T extends unknown[]>(...validators: ((...val: T) => boolean)[]) => (...args: T) => boolean;
/**
 * Iteration of validators that returns `true` when everything are `false`.
 * @param validators - Any number of validators that return a `boolean`
 * @returns - A function that takes an argument of `validators[0]`
 *
 * @remarks
 * Never throw an error. Returns `false` on error.
 *
 * @example
 * ```ts
 * const isNotNil = everyFalse(isNull, isUndefined)
 * isNotNil('this-is-not-nil') // true
 * isNotNil(null) // false
 * isNotNil(undefined) // false
 * ```
 *
 * @example
 * ```ts
 * const dangerValidation = everyFalse((val: any) => val.size === 1)
 * // null.size will occur TypeError but catch and return false
 * dangerValidation(null) // false
 * ```
 *
 * @public
 */
declare const everyFalse: <T extends unknown[]>(...validators: ((...val: T) => boolean)[]) => (...args: T) => boolean;
/**
 * Iteration of validators that returns `true` when some validators are `true`.
 * @param validators - Any number of validators that return a `boolean`
 * @returns A function that takes an argument of `validators[0]`
 *
 * @remarks
 * Never throw an error. If an error occurs, the validation will skip and next.
 *
 * @example
 * ```ts
 * const isValidPassword = someTrue(gtLength(8), hasCapitalLetter, hasSpecialLetter, hasNumber)
 * isValidPassword('fail') // false
 * isValidPassword('greater-than-8') // true
 * isValidPassword('Has cap') // true
 * isValidPassword('Has!') // true
 * ```
 *
 * @example
 * ```ts
 * const dangerValidation = someTrue((val: any) => val.size === 1, isNull)
 * // null.size will occur TypeError but skip and next
 * dangerValidation(null) // true
 * ```
 *
 * @public
 */
declare const someFalse: <T extends unknown[]>(...validators: ((...val: T) => boolean)[]) => (...args: T) => boolean;
/**
 * Iteration of validators that returns `true` when some validators are `false`.
 * @param validators - Any number of validators that return a `boolean`
 * @returns A function that takes an argument of `validators[0]`
 *
 * @remarks
 * Never throw an error. If an error occurs, the validation will skip and next.
 *
 * @example
 * ```ts
 * const isValidPassword = someFalse(gtLength(8), hasCapitalLetter, hasSpecialLetter, hasNumber)
 * isValidPassword('7letter') // true
 * isValidPassword('hasCapital!100') // false
 * ```
 *
 * @example
 * ```ts
 * const dangerValidation = someFalse((val: any) => val.size === 1, isNull)
 * // null.size will occur TypeError but skip and next
 * dangerValidation(null) // false
 * ```
 *
 * @public
 */
declare const someTrue: <T extends unknown[]>(...validators: ((...val: T) => boolean)[]) => (...args: T) => boolean;
/**
 * Receives a validator and message pair and returns a message when validation is `true`.
 * @param tuple - Tuple of [Validator, ReturnValue]
 * @returns Return `tuple[1]` when `tuple[0]` is `true`; otherwise undefined.
 *
 * @beta
 */
declare const trueThen: <R, T extends AnyFn<any, unknown>, U extends R | AnyFn<Parameters<T>, R>, P extends [
    T,
    U
]>(...tuple: P[]) => (...args: Parameters<P[0]>) => ValueOrReturnType<P[1]> | undefined;
/**
 * Receives a validator and message pair and returns all message `array` when validation is `true`.
 * @param tuple - Tuple of [Validator, ReturnValue]
 * @returns Return array of `tuple[1]` when `tuple[0]` is `true`; otherwise empty `array`.
 *
 * @beta
 */
declare const trueThenAll: <R, T extends AnyFn<any, unknown>, U extends R | AnyFn<Parameters<T>, R>, P extends [
    T,
    U
]>(...tuple: P[]) => (...args: Parameters<P[0]>) => [
] | ValueOrReturnType<P[1]>[];
/**
 * Receives a validator and message pair and returns a message when validation is `false`.
 * @param tuple - Tuple of [Validator, ReturnValue]
 * @returns Return `tuple[1]` when `tuple[0]` is `false`; otherwise undefined.
 *
 * @beta
 */
declare const falseThen: <R, T extends AnyFn<any, unknown>, U extends R | AnyFn<Parameters<T>, R>, P extends [
    T,
    U
]>(...tuple: P[]) => (...args: Parameters<P[0]>) => ValueOrReturnType<P[1]> | undefined;
/**
 * Receives a validator and message pair and returns all message `array` when validation is `false`.
 * @param tuple - Tuple of [Validator, ReturnValue]
 * @returns Return array of `tuple[1]` when `tuple[0]` is `false`; otherwise empty `array`.
 *
 * @beta
 */
declare const falseThenAll: <R, T extends AnyFn<any, unknown>, U extends R | AnyFn<Parameters<T>, R>, P extends [
    T,
    U
]>(...tuple: P[]) => (...args: Parameters<P[0]>) => [
] | ValueOrReturnType<P[1]>[];
/**
 * Utility function to convert arguments.
 * @param conversion - Any function
 * @param fn - A function that takes the return value of `conversion` as an argument
 * @returns A function that takes a `conversion` argument as an argument
 *
 * @example
 * ```ts
 * const fn = cv(() => 1, (val) => val + 1)
 * fn() // 2
 *
 * const upcast = cv((val: unknown) => val as string, (val) => val.length > 8)
 * upcast('hello-world' as unknown) // true
 *
 * const mailHeader = cv((user: { name: string }) => user.name, (name) => `Dear ${name}` )
 * mailHeader({ name: 'Tom' }) // 'Dear Tom'
 * ```
 */
declare const cv: <A extends unknown[], T extends (...args: any[]) => A, R>(conversion: T, fn: (...args: ReturnType<T>) => R) => (...args: Parameters<T>) => R;
/**
 * A function that casts the return value of a function.
 * @returns A function whose return value is cast to the specified type
 *
 * @example
 * ```ts
 * const castString = cast<string>()
 * castString // types: (val: unknown) => string
 * ```
 */
declare const cast: <R, T extends unknown = unknown>() => (val: T) => R;
/**
 * Cast function for `string`
 *
 * @beta
 */
declare const castString: (val: unknown) => string;
/**
 * Cast function for `number`
 *
 * @beta
 */
declare const castNumber: (val: unknown) => number;
/**
 * Cast function for `undefined`
 *
 * @beta
 */
declare const castUndefined: (val: unknown) => undefined;
/**
 * Cast function for `null`
 *
 * @beta
 */
declare const castNull: (val: unknown) => null;
/**
 * Cast function for `undefined` or `null`
 *
 * @beta
 */
declare const castNil: (val: unknown) => null | undefined;
/**
 * Cast function for `symbol`
 *
 * @beta
 */
declare const castBigInt: (val: unknown) => bigint;
export { gteLength, gtLength, lteLength, ltLength, isArray, isBigint, isBoolean, isEmpty, isFunction, isJSONObject, isLength0, isNil, isNull, isNumber, isObject, isPrimitive, isString, isSymbol, isUndefined, isLowerCase, isUpperCase, isLeftTrimmable, isRightTrimmable, isTrimmable, everyFalse, everyTrue, falseThen, falseThenAll, someFalse, someTrue, trueThen, trueThenAll, cast, castBigInt, castNil, castNull, castNumber, castString, castUndefined, cv };
//# sourceMappingURL=index.es.d.ts.map