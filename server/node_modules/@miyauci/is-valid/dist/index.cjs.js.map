{"version":3,"file":"index.cjs.js","sources":["../validation/isArray.ts","../validation/_utils.ts","../validation/isBigint.ts","../validation/isBoolean.ts","../validation/isString.ts","../validation/isLength0.ts","../validation/isNull.ts","../validation/_constants.ts","../validation/isUndefined.ts","../validation/isNil.ts","../validation/isNumber.ts","../validation/isSymbol.ts","../validation/isPrimitive.ts","../validation/isObject.ts","../validation/isFunction.ts","../composite/combinator.ts","../composite/is_valid.ts","../validation/length.ts","../validation/isEmpty.ts","../validation/isJSONObject.ts","../validation/isTrimmable.ts","../validation/isLowerCase.ts","../validation/isUpperCase.ts"],"sourcesContent":["// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\n/**\n * Whatever argument is `Array` or not.\n *\n * @param val - Input any value\n * @returns The result of `Array.isArray(val)`\n *\n * @example\n * ```ts\n * isArray([]) // true\n * isArray(['hello', 'world']) // true\n * isArray({}) // false\n * ```\n *\n * @public\n */\nconst isArray = (val: unknown): val is unknown[] => Array.isArray(val);\n\nexport { isArray };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\ntype TypeOf =\n  | \"bigint\"\n  | \"boolean\"\n  | \"function\"\n  | \"number\"\n  | \"object\"\n  | \"string\"\n  | \"symbol\"\n  | \"undefined\";\n\nconst typeComparisonFactory = <T>(type: TypeOf) =>\n  (val: unknown): val is T => typeof val === type;\n\nexport { typeComparisonFactory };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { typeComparisonFactory } from \"./_utils.ts\";\n\n/**\n * Whatever argument is type of `bigint` or not.\n *\n * @param val - input any value\n * @returns The result of `typeof val === 'bigint'`\n *\n * @example\n * ```ts\n * isBigint(1n) // true\n * isBigint(1000) // false\n * ```\n *\n * @public\n */\nconst isBigint = typeComparisonFactory<bigint>(\"bigint\");\n\nexport { isBigint };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { typeComparisonFactory } from \"./_utils.ts\";\n\n/**\n * Whatever argument is type of `boolean` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'boolean'`\n *\n * @example\n * ```ts\n * isBoolean(true) // true\n * isBoolean('hello') // false\n * ```\n *\n * @public\n */\nconst isBoolean = typeComparisonFactory<boolean>(\"boolean\");\n\nexport { isBoolean };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { typeComparisonFactory } from \"./_utils.ts\";\n\n/**\n * Whatever argument is type of `string` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'string'`\n *\n * @example\n * ```ts\n * isString('hello world') // true\n * isString(1000) // false\n * ```\n *\n * @public\n */\nconst isString = typeComparisonFactory<string>(\"string\");\n\nexport { isString };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { ifElseFn, length, N, or } from \"../deps.ts\";\nimport { isArray } from \"./isArray.ts\";\nimport { isString } from \"./isString.ts\";\n/**\n * Whatever argument length is `0` or not.\n *\n * @param val - Input any value\n * @returns The result of `!val.length` (if not have `length` property, `false`)\n *\n * @example\n * ```ts\n * isLength0([]) // true\n * isLength0([]) // true\n * isLength0('hello') // false\n * isLength0(undefined) // false\n * ```\n *\n * @beta\n */\nconst isLength0 = ifElseFn(\n  (val) => or(isString(val), () => isArray(val)),\n  (val) => N(length(val as string | string[])),\n  false,\n);\n\nexport { isLength0 };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { NULL } from \"./_constants.ts\";\n\n/**\n * Whatever argument is type of `null` or not.\n *\n * @param val - Input any value\n * @returns The result of `val === null`\n *\n * @example\n * ```ts\n * isNull(null) // true\n * isNull(undefined) // false\n * ```\n *\n * @public\n */\nconst isNull = (val: unknown): val is null => val === NULL;\n\nexport { isNull };\n","export const JSON_OBJECT = \"Object\";\nexport const NULL = null;\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { typeComparisonFactory } from \"./_utils.ts\";\n\n/**\n * Whatever argument is type of `undefined` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'undefined'`\n *\n * @example\n * ```ts\n * isUndefined(undefined) // true\n * isUndefined('hello') // false\n * ```\n *\n * @public\n */\nconst isUndefined = typeComparisonFactory<undefined>(\"undefined\");\n\nexport { isUndefined };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { or } from \"../deps.ts\";\nimport { isNull } from \"./isNull.ts\";\nimport { isUndefined } from \"./isUndefined.ts\";\n\n/**\n * Whatever argument is type of `undefined` or `null`.\n *\n * @param val - Input any value\n * @returns The result of type of `val` is `undefined` or `null`\n *\n * @example\n * ```ts\n * isNil(undefined) // true\n * isNil(null) // true\n * isNil([]) // false\n * ```\n *\n * @public\n *\n */\nconst isNil = (val: unknown): val is null | undefined =>\n  or(isUndefined(val), () => isNull(val));\n\nexport { isNil };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { typeComparisonFactory } from \"./_utils.ts\";\n\n/**\n * Whatever argument is type of `number` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'number'`\n *\n * @example\n * ```ts\n * isNumber(0) // true\n * isNumber('hello') // false\n * ```\n *\n * @public\n */\nconst isNumber = typeComparisonFactory<number>(\"number\");\n\nexport { isNumber };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { typeComparisonFactory } from \"./_utils.ts\";\n\n/**\n * Whatever argument is type of `symbol` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'symbol'`\n *\n * @example\n * ```ts\n * isSymbol(Symbol('hello')) // true\n * isSymbol('hello') // false\n * ```\n *\n * @public\n */\nconst isSymbol = typeComparisonFactory<symbol>(\"symbol\");\n\nexport { isSymbol };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { isBigint } from \"./isBigint.ts\";\nimport { isBoolean } from \"./isBoolean.ts\";\nimport { isNil } from \"./isNil.ts\";\nimport { isNumber } from \"./isNumber.ts\";\nimport { isString } from \"./isString.ts\";\nimport { isSymbol } from \"./isSymbol.ts\";\nimport { Primitive } from \"../deps.ts\";\n\n/**\n * Whatever argument is `primitive` or not.\n *\n * @param val - Input any value\n * @returns The result of primitive or not\n *\n * @remarks\n * Definition of Primitive\n * - `string`\n * - `number`\n * - `bigint`\n * - `boolean`\n * - `symbol`\n * - `undefined`\n * - `null`\n *\n * @example\n * ```ts\n * isPrimitive(true) // true\n * isPrimitive([]) // false\n * ```\n *\n * @public\n */\nconst isPrimitive = (val: unknown): val is Primitive =>\n  [isNil, isBoolean, isNumber, isString, isBigint, isSymbol].some((is) =>\n    is(val)\n  );\n\nexport { isPrimitive };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { isPrimitive } from \"./isPrimitive.ts\";\nimport { N } from \"../deps.ts\";\n\n/**\n * Whatever argument is type of `object` or not.\n *\n * @param val - Input any value\n * @returns The result of object or not\n *\n * @remarks\n * Definition of Object\n *\n * Not Primitive\n *\n * @remarks\n * Definition of Primitive\n * - `string`\n * - `number`\n * - `bigint`\n * - `boolean`\n * - `symbol`\n * - `undefined`\n * - `null`\n *\n *\n * @example\n * ```ts\n * isObject([]) // true\n * isObject('hello') // false\n * ```\n *\n * @public\n */\nconst isObject = (val: unknown): val is Record<any, any> => N(isPrimitive(val));\n\nexport { isObject };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport type { AnyFn } from \"../deps.ts\";\nimport { typeComparisonFactory } from \"./_utils.ts\";\n\n/**\n * Whatever argument is type of `function` or not.\n *\n * @param val - Input any value\n * @returns The result of `typeof val === 'function'`\n *\n * @example\n * ```ts\n * isFunction(function) // true\n * isFunction('hello') // false\n * ```\n *\n * @public\n */\nconst isFunction = typeComparisonFactory<AnyFn>(\"function\");\n\nexport { isFunction };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\n\n/**\n * Utility function to convert arguments.\n * @param conversion - Any function\n * @param fn - A function that takes the return value of `conversion` as an argument\n * @returns A function that takes a `conversion` argument as an argument\n *\n * @example\n * ```ts\n * const fn = cv(() => 1, (val) => val + 1)\n * fn() // 2\n *\n * const upcast = cv((val: unknown) => val as string, (val) => val.length > 8)\n * upcast('hello-world' as unknown) // true\n *\n * const mailHeader = cv((user: { name: string }) => user.name, (name) => `Dear ${name}` )\n * mailHeader({ name: 'Tom' }) // 'Dear Tom'\n * ```\n */\nconst cv = <\n  A extends unknown[],\n  T extends (...args: any[]) => A,\n  R,\n>(\n  conversion: T,\n  fn: (...args: ReturnType<T>) => R,\n) => (...args: Parameters<T>): R => fn(...conversion(...args) as ReturnType<T>);\n\n/**\n * A function that casts the return value of a function.\n * @returns A function whose return value is cast to the specified type\n *\n * @example\n * ```ts\n * const castString = cast<string>()\n * castString // types: (val: unknown) => string\n * ```\n */\nconst cast = <R, T extends unknown = unknown>() => (val: T): R => val as R;\n\n/**\n * Cast function for `string`\n *\n * @beta\n */\nconst castString = cast<string>();\n/**\n * Cast function for `number`\n *\n * @beta\n */\nconst castNumber = cast<number>();\n/**\n * Cast function for `undefined`\n *\n * @beta\n */\nconst castUndefined = cast<undefined>();\n/**\n * Cast function for `null`\n *\n * @beta\n */\nconst castNull = cast<null>();\n/**\n * Cast function for `undefined` or `null`\n *\n * @beta\n */\nconst castNil = cast<null | undefined>();\n/**\n * Cast function for `symbol`\n *\n * @beta\n */\nconst castBigInt = cast<bigint>();\n\nexport {\n  cast,\n  castBigInt,\n  castNil,\n  castNull,\n  castNumber,\n  castString,\n  castUndefined,\n  cv,\n};\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { AnyFn, N, tryCatch } from \"../deps.ts\";\nimport { isFunction } from \"../validation/isFunction.ts\";\n\ntype ValueOrReturnType<T> = T extends AnyFn ? ReturnType<T> : T;\n\n/**\n * Iteration of validators that returns `true` when everything are `true`.\n * @param validators - Any number of validators that return a `boolean`\n * @returns - A function that takes an argument of `validators[0]`\n *\n * @remarks\n * Never throw an error. Returns `false` on error.\n *\n * @example\n * ```ts\n * const isValidPassword = everyTrue(isString, gtLength(8), ltLength(30))\n * isValidPassword('this-is-valid-password') // true\n * ```\n *\n * @example\n * ```ts\n * const dangerValidation = everyTrue((val: any) => val.size === 1)\n * // null.size will occur TypeError but catch and return false\n * dangerValidation(null) // false\n * ```\n *\n * @public\n */\nconst everyTrue = <T extends unknown[]>(\n  ...validators: ((...val: T) => boolean)[]\n) =>\n  (...args: T): boolean =>\n    validators.every((validator) => tryCatch(() => validator(...args), false));\n\n/**\n * Iteration of validators that returns `true` when everything are `false`.\n * @param validators - Any number of validators that return a `boolean`\n * @returns - A function that takes an argument of `validators[0]`\n *\n * @remarks\n * Never throw an error. Returns `false` on error.\n *\n * @example\n * ```ts\n * const isNotNil = everyFalse(isNull, isUndefined)\n * isNotNil('this-is-not-nil') // true\n * isNotNil(null) // false\n * isNotNil(undefined) // false\n * ```\n *\n * @example\n * ```ts\n * const dangerValidation = everyFalse((val: any) => val.size === 1)\n * // null.size will occur TypeError but catch and return false\n * dangerValidation(null) // false\n * ```\n *\n * @public\n */\nconst everyFalse = <T extends unknown[]>(\n  ...validators: ((...val: T) => boolean)[]\n) =>\n  (...args: T): boolean =>\n    validators.every((validator) =>\n      tryCatch(() => N(validator(...args)), false)\n    );\n\n/**\n * Iteration of validators that returns `true` when some validators are `true`.\n * @param validators - Any number of validators that return a `boolean`\n * @returns A function that takes an argument of `validators[0]`\n *\n * @remarks\n * Never throw an error. If an error occurs, the validation will skip and next.\n *\n * @example\n * ```ts\n * const isValidPassword = someTrue(gtLength(8), hasCapitalLetter, hasSpecialLetter, hasNumber)\n * isValidPassword('fail') // false\n * isValidPassword('greater-than-8') // true\n * isValidPassword('Has cap') // true\n * isValidPassword('Has!') // true\n * ```\n *\n * @example\n * ```ts\n * const dangerValidation = someTrue((val: any) => val.size === 1, isNull)\n * // null.size will occur TypeError but skip and next\n * dangerValidation(null) // true\n * ```\n *\n * @public\n */\nconst someFalse = <T extends unknown[]>(\n  ...validators: ((...val: T) => boolean)[]\n) =>\n  (...args: T): boolean =>\n    validators.some((validator) =>\n      tryCatch(() => N(validator(...args)), false)\n    );\n\n/**\n * Iteration of validators that returns `true` when some validators are `false`.\n * @param validators - Any number of validators that return a `boolean`\n * @returns A function that takes an argument of `validators[0]`\n *\n * @remarks\n * Never throw an error. If an error occurs, the validation will skip and next.\n *\n * @example\n * ```ts\n * const isValidPassword = someFalse(gtLength(8), hasCapitalLetter, hasSpecialLetter, hasNumber)\n * isValidPassword('7letter') // true\n * isValidPassword('hasCapital!100') // false\n * ```\n *\n * @example\n * ```ts\n * const dangerValidation = someFalse((val: any) => val.size === 1, isNull)\n * // null.size will occur TypeError but skip and next\n * dangerValidation(null) // false\n * ```\n *\n * @public\n */\nconst someTrue = <T extends unknown[]>(\n  ...validators: ((...val: T) => boolean)[]\n) =>\n  (...args: T): boolean =>\n    validators.some((validator) => tryCatch(() => validator(...args), false));\n\n/**\n * Receives a validator and message pair and returns a message when validation is `true`.\n * @param tuple - Tuple of [Validator, ReturnValue]\n * @returns Return `tuple[1]` when `tuple[0]` is `true`; otherwise undefined.\n *\n * @beta\n */\nconst trueThen = <\n  R,\n  T extends AnyFn,\n  U extends AnyFn<Parameters<T>, R> | R,\n  P extends [T, U],\n>(...tuple: P[]) =>\n  (...args: Parameters<P[0]>): ValueOrReturnType<P[1]> | undefined => {\n    for (const [validator, msgFn] of tuple) {\n      if (validator(...args)) {\n        if (isFunction(msgFn)) {\n          return msgFn(...args) as any;\n        }\n        return msgFn as any;\n      }\n    }\n    return undefined;\n  };\n\n/**\n * Receives a validator and message pair and returns all message `array` when validation is `true`.\n * @param tuple - Tuple of [Validator, ReturnValue]\n * @returns Return array of `tuple[1]` when `tuple[0]` is `true`; otherwise empty `array`.\n *\n * @beta\n */\nconst trueThenAll = <\n  R,\n  T extends AnyFn,\n  U extends AnyFn<Parameters<T>, R> | R,\n  P extends [T, U],\n>(...tuple: P[]) =>\n  (...args: Parameters<P[0]>): ValueOrReturnType<P[1]>[] | [] => {\n    const messages = [];\n\n    for (const [validator, msgFn] of tuple) {\n      if (validator(...args)) {\n        if (isFunction(msgFn)) {\n          messages.push(msgFn(...args));\n        } else {\n          messages.push(msgFn);\n        }\n      }\n    }\n\n    return messages as ValueOrReturnType<P[1]>[] | [];\n  };\n\n/**\n * Receives a validator and message pair and returns a message when validation is `false`.\n * @param tuple - Tuple of [Validator, ReturnValue]\n * @returns Return `tuple[1]` when `tuple[0]` is `false`; otherwise undefined.\n *\n * @beta\n */\nconst falseThen = <\n  R,\n  T extends AnyFn,\n  U extends AnyFn<Parameters<T>, R> | R,\n  P extends [T, U],\n>(...tuple: P[]) =>\n  (...args: Parameters<P[0]>): ValueOrReturnType<P[1]> | undefined => {\n    for (const [validator, msgFn] of tuple) {\n      if (!validator(...args)) {\n        if (isFunction(msgFn)) {\n          return msgFn(...args) as any;\n        }\n        return msgFn as any;\n      }\n    }\n    return undefined;\n  };\n\n/**\n * Receives a validator and message pair and returns all message `array` when validation is `false`.\n * @param tuple - Tuple of [Validator, ReturnValue]\n * @returns Return array of `tuple[1]` when `tuple[0]` is `false`; otherwise empty `array`.\n *\n * @beta\n */\nconst falseThenAll = <\n  R,\n  T extends AnyFn,\n  U extends AnyFn<Parameters<T>, R> | R,\n  P extends [T, U],\n>(...tuple: P[]) =>\n  (...args: Parameters<P[0]>): ValueOrReturnType<P[1]>[] | [] => {\n    const messages = [];\n\n    for (const [validator, msgFn] of tuple) {\n      if (!validator(...args)) {\n        if (isFunction(msgFn)) {\n          messages.push(msgFn(...args));\n        } else {\n          messages.push(msgFn);\n        }\n      }\n    }\n\n    return messages as ValueOrReturnType<P[1]>[] | [];\n  };\n\nexport {\n  everyFalse,\n  everyTrue,\n  falseThen,\n  falseThenAll,\n  someFalse,\n  someTrue,\n  trueThen,\n  trueThenAll,\n};\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { gt, gte, length, lt, lte, pipe } from \"../deps.ts\";\n\n/**\n * Create length validator of greater then `val`. It's exclusive.\n *\n * @param val - `Number` of check length\n * @returns Function what validate length is greater than `val` or not\n *\n * @example\n * ```ts\n * const gtLength3 = gtLength(3)\n * gtLength3('bad') // false\n * gtLength3(['hello', 'world', 'tom']) // false\n * gtLength3('good') // true\n * ```\n *\n * @beta\n */\nconst gtLength = (val: number) =>\n  pipe(length, (length: number): boolean => gt(length, val));\n\n/**\n * Create length validator of greater equal then `val`. It's inclusive.\n *\n * @param val - `Number` of check length\n * @returns Function what validate length is greater equal than `val` or not\n *\n * @example\n * ```ts\n * const gteLength5 = gteLength(5)\n * gteLength5('good') // false\n * gteLength5('hello') // true\n * gteLength5([1, 2, 3, 4, 5]) // true\n * ```\n *\n * @beta\n */\nconst gteLength = (val: number) =>\n  pipe(length, (length: number): boolean => gte(length, val));\n\n/**\n * Create length validator of less then `val`. It's exclusive.\n *\n * @param val - `Number` of check length\n * @returns Function what validate length is less than `val` or not\n *\n * @example\n * ```ts\n * const ltLength3 = ltLength(3)\n * gtLength3('bad') // false\n * gtLength3(['hello', 'world', 'tom']) // false\n * gtLength3('to') // true\n * ```\n *\n * @beta\n */\nconst ltLength = (val: number) =>\n  pipe(length, (length: number): boolean => lt(length, val));\n\n/**\n * Create length validator of less equal then `val`. It's inclusive.\n *\n * @param val - `Number` of check length\n * @returns Function what validate length is less equal than `val` or not\n *\n * @example\n * ```ts\n * const lteLength5 = lteLength(5)\n * lteLength5('good') // true\n * lteLength5('hello') // true\n * lteLength5([1, 2, 3, 4, 5]) // true\n * ```\n *\n * @beta\n */\nconst lteLength = (val: number) =>\n  pipe(length, (length: number): boolean => lte(length, val));\n\nexport { gteLength, gtLength, lteLength, ltLength };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { and, Empty, keys, or } from \"../deps.ts\";\nimport { isArray } from \"./isArray.ts\";\nimport { isLength0 } from \"./isLength0.ts\";\nimport { isObject } from \"./isObject.ts\";\nimport { isString } from \"./isString.ts\";\n\n/**\n * Returns `true` if the given value is its type's empty value; otherwise `false`.\n *\n * @param val - Input any value\n * @returns The result of empty or not\n *\n * @remarks\n * The definition of Empty\n * - `''`\n * - `{}`\n * - `[]`\n *\n * @example\n * ```ts\n * isEmpty('') // true\n * isEmpty({}) // true\n * isEmpty([]) // true\n *\n * isEmpty('hello world') // false\n * isEmpty(1000) // false\n * ```\n *\n * @public\n */\nconst isEmpty = (val: unknown): val is Empty => {\n  if (or(isString(val), () => isArray(val))) return isLength0(val);\n  else if (isObject(val)) {\n    return and(isLength0(keys(val)), () => val.constructor === Object);\n  } else return false;\n};\n\nexport { isEmpty };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { constructorName } from \"../deps.ts\";\nimport { JSON_OBJECT } from \"./_constants.ts\";\n\n/**\n * Whatever argument is JSON Object or not.\n *\n * @param val - Input any value\n * @returns if `val` is JSON Object `true` otherwise; `false`\n *\n * @example\n * ```ts\n * isJSONObject({ hoge: 'huga'}) // true\n * isJSONObject(Object()) // true\n * isJSONObject(new Object()) // true\n *\n * isJSONObject([]) // false\n * isJSONObject(new Set()) // false\n * ```\n *\n * @public\n */\nconst isJSONObject = (val: unknown): val is Record<PropertyKey, unknown> =>\n  constructorName(val) === JSON_OBJECT;\n\nexport { isJSONObject };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\nimport { trim, trimLeft, trimRight } from \"../deps.ts\";\n\n/**\n * Whatever val is trimmable or not.\n *\n * @param val - Any `string`\n * @returns The result of `trim(val) !== val`\n *\n * @example\n * ```ts\n * isTrimmable(' test') // true\n * isTrimmable('test ') // true\n * isTrimmable(' test ') // true\n * ```\n */\nconst isTrimmable = (val: string) => trim(val) !== val;\n\n/**\n * Whatever val is left side trimmable or not.\n *\n * @param val - Any `string`\n * @returns The result of `trimLeft(val) !== val`\n *\n * @example\n * ```ts\n * isLeftTrimmable('test ') // false\n * isLeftTrimmable(' test') // true\n * isLeftTrimmable(' test ') // true\n * ```\n */\nconst isLeftTrimmable = (val: string) => trimLeft(val) !== val;\n\n/**\n * Whatever val is right side trimmable or not.\n *\n * @param val - Any `string`\n * @returns The result of `trimRight(val) !== val`\n *\n * @example\n * ```ts\n * isRightTrimmable(' test') // false\n * isRightTrimmable('test ') // true\n * isRightTrimmable(' test ') // true\n * ```\n */\nconst isRightTrimmable = (val: string) => trimRight(val) !== val;\n\nexport { isLeftTrimmable, isRightTrimmable, isTrimmable };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\n\n/**\n * Whatever argument is Lower case `string` or not.\n *\n * @param val - Any `string`\n * @returns The result of `val.toLowerCase() === val`\n *\n * @example\n * ```ts\n * isLowerCase('hello world') // true\n * isLowerCase('Hello world') // false\n * ```\n *\n * @beta\n */\nconst isLowerCase = (val: string): boolean => val.toLowerCase() === val;\n\nexport { isLowerCase };\n","// Copyright 2021-present the is-valid authors. All rights reserved. MIT license.\n\n/**\n * Whatever argument is Upper case `string` or not.\n *\n * @param val - Any `string`\n * @returns The result of `val.toUpperCase() === val`\n *\n * @example\n * ```ts\n * isUpperCase('HELLO WORLD') // true\n * isUpperCase('hello world') // false\n * ```\n *\n * @beta\n */\nconst isUpperCase = (val: string): boolean => val.toUpperCase() === val;\n\nexport { isUpperCase };\n"],"names":["isArray","val","Array","typeComparisonFactory","type","isBigint","isBoolean","isString","isLength0","ifElseFn","or","N","length","isNull","isUndefined","isNil","isNumber","isSymbol","isPrimitive","some","is","isObject","isFunction","cast","castString","castNumber","castUndefined","castNull","castNil","castBigInt","conversion","fn","args","validators","every","validator","tryCatch","tuple","msgFn","messages","push","pipe","gt","gte","and","keys","constructor","Object","constructorName","trimLeft","toLowerCase","trimRight","trim","toUpperCase","lt","lte"],"mappings":";oGAgBMA,EAAWC,GAAmCC,MAAMF,QAAQC,GCL5DE,EAA4BC,GAC/BH,UAAkCA,IAAQG,ECKvCC,EAAWF,EAA8B,UCAzCG,EAAYH,EAA+B,WCA3CI,EAAWJ,EAA8B,UCGzCK,EAAYC,YACfR,GAAQS,KAAGH,EAASN,IAAM,IAAMD,EAAQC,OACxCA,GAAQU,IAAEC,SAAOX,MAClB,GCNIY,EAAUZ,GChBI,ODgB0BA,EEAxCa,EAAcX,EAAiC,aCI/CY,EAASd,GACbS,KAAGI,EAAYb,IAAM,IAAMY,EAAOZ,KCL9Be,EAAWb,EAA8B,UCAzCc,EAAWd,EAA8B,UCgBzCe,EAAejB,GACnB,CAACc,EAAOT,EAAWU,EAAUT,EAAUF,EAAUY,GAAUE,MAAMC,GAC/DA,EAAGnB,KCDDoB,EAAYpB,GAA0CU,IAAEO,EAAYjB,IChBpEqB,EAAanB,EAA6B,YCqB1CoB,EAAO,IAAuCtB,GAAcA,EAO5DuB,EAP8CvB,GAAcA,EAa5DwB,EAb8CxB,GAAcA,EAmB5DyB,EAnB8CzB,GAAcA,EAyB5D0B,EAzB8C1B,GAAcA,EA+B5D2B,EA/B8C3B,GAAcA,EAqC5D4B,EArC8C5B,GAAcA,wJAnBvD,CAKT6B,EACAC,IACG,IAAIC,IAA2BD,KAAMD,KAAcE,uBCiCrC,IACdC,IAEH,IAAID,IACFC,EAAWC,OAAOC,GAChBC,YAAS,IAAMzB,IAAEwB,KAAaH,MAAQ,uBApC1B,IACbC,IAEH,IAAID,IACFC,EAAWC,OAAOC,GAAcC,YAAS,IAAMD,KAAaH,KAAO,uBAgKrD,IAKbK,IACH,IAAIL,SACG,MAAOG,EAAWG,KAAUD,MAC1BF,KAAaH,UACZV,EAAWgB,GACNA,KAASN,GAEXM,wBAaM,IAKhBD,IACH,IAAIL,WACIO,EAAW,OAEZ,MAAOJ,EAAWG,KAAUD,EAC1BF,KAAaH,KACZV,EAAWgB,GACbC,EAASC,KAAKF,KAASN,IAEvBO,EAASC,KAAKF,WAKbC,oBC1NOtC,GAChBwC,OAAK7B,UAASA,GAA4B8B,KAAG9B,EAAQX,uBAkBpCA,GACjBwC,OAAK7B,UAASA,GAA4B+B,MAAI/B,EAAQX,8ECRvCA,GACXS,KAAGH,EAASN,IAAM,IAAMD,EAAQC,KAAcO,EAAUP,KACnDoB,EAASpB,IACT2C,MAAIpC,EAAUqC,OAAK5C,KAAO,IAAMA,EAAI6C,cAAgBC,mDCZzC9C,GZtBK,WYuBzB+C,kBAAgB/C,2BCQOA,GAAgBgD,WAAShD,KAASA,0CCftCA,GAAyBA,EAAIiD,gBAAkBjD,wHD8B1CA,GAAgBkD,YAAUlD,KAASA,4DA9BxCA,GAAgBmD,OAAKnD,KAASA,4CEA9BA,GAAyBA,EAAIoD,gBAAkBpD,mBLyClDA,GAChBwC,OAAK7B,UAASA,GAA4B0C,KAAG1C,EAAQX,uBAkBpCA,GACjBwC,OAAK7B,UAASA,GAA4B2C,MAAI3C,EAAQX,uBDiBtC,IACbgC,IAEH,IAAID,IACFC,EAAWd,MAAMgB,GACfC,YAAS,IAAMzB,IAAEwB,KAAaH,MAAQ,sBA2B3B,IACZC,IAEH,IAAID,IACFC,EAAWd,MAAMgB,GAAcC,YAAS,IAAMD,KAAaH,KAAO,sBASrD,IAKZK,IACH,IAAIL,SACG,MAAOG,EAAWG,KAAUD,KAC3BF,KAAaH,UACXV,EAAWgB,GACNA,KAASN,GAEXM,uBAaK,IAKfD,IACH,IAAIL,WACIO,EAAW,OAEZ,MAAOJ,EAAWG,KAAUD,EAC3BF,KAAaH,KACXV,EAAWgB,GACbC,EAASC,KAAKF,KAASN,IAEvBO,EAASC,KAAKF,WAKbC"}