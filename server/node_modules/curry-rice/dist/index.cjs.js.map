{"version":3,"file":"index.cjs.js","sources":["../curry.ts"],"sourcesContent":["// Copyright 2021-present the Curry authors. All rights reserved. MIT license.\n\n// deno-lint-ignore-file no-explicit-any\n\n/**\n * Alias for Any array types\n *\n * @internal\n */\ntype AnyArray = readonly unknown[];\n\n/**\n * @internal\n */\ntype Union2Intersection<U> = (\n  U extends unknown ? (arg: U) => void : never\n) extends (arg: infer I) => void ? I\n  : never;\n\n/**\n * Pop types\n * @typeParams - T Any array\n * @example\n * ```ts\n * Pop<[1, 2, 3]> = [1, 2].\n * ```\n *\n * @internal\n */\ntype Pop<T extends AnyArray> = T extends [...infer Head, unknown] ? Head\n  : T extends readonly [...infer Head, unknown] ? readonly [...Head]\n  : never;\n\n/**\n * Shift types\n * @typeParams S - Any array\n * @example\n * ```ts\n * Shift<[1], [1, 2, 3]> = [2, 3].\n * Shift<[1, 2], [1, 2, 3]> = [3].\n * ```\n *\n * @internal\n */\ntype Shift<S extends AnyArray, T extends AnyArray> = T extends [\n  ...S,\n  ...infer Rest,\n] ? Rest\n  : never;\n\n/**\n * @example\n * ```ts\n * UnionFactorial<[1, 2, 3]> = [1] | [1, 2] | [1, 2, 3].\n * ```\n *\n * @internal\n */\ntype UnionFactorial<T extends AnyArray> = T extends readonly [] ? never\n  : T | UnionFactorial<Pop<T>>;\n\n/**\n * @example\n * ```ts\n * OverloadsByArgs<[1] | [1, 2], [1, 2, 3], 7> =\n *  | CurriedWithFixArgs<[1], [2, 3], 7>\n *  | CurriedWithFixArgs<[1, 2], [3], 7>.\n * ```\n *\n * @internal\n */\ntype OverloadsByArgs<\n  Args extends AnyArray,\n  FullArgs extends AnyArray,\n  ReturnValue,\n> = Args extends unknown\n  ? CurriedWithFixArgs<Args, Shift<Args, FullArgs>, ReturnValue>\n  : never;\n\n/**\n * @internal\n */\ntype CurriedWithFixArgs<\n  Args extends AnyArray,\n  RestArgs extends AnyArray,\n  ReturnValue,\n> = (...args: Args) => Curried<RestArgs, ReturnValue>;\n\n/**\n * Curry types\n *\n * @internal\n */\ntype Curried<Args extends AnyArray, ReturnValue> = Args extends [] ? ReturnValue\n  : Union2Intersection<\n    OverloadsByArgs<UnionFactorial<Args>, Args, ReturnValue>\n  >;\n\n/**\n * Creates a function that accepts arguments of `fn` and either invokes `fn` returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining `fn` arguments, and so on.\n *\n * @param fn - The function to curry\n * @returns The new curried function\n *\n * @remarks\n * Maximum number of arity is `19`. Beyond that, the type system will breaks.\n *\n * @example\n * ```ts\n * const replace = (from: string, to: string, val: string) => val.replace(from, to)\n * const curriedReplace = curry(replace)\n * const curriedReplace('hello', 'hi', 'hello world') // 'hi world'\n * const curriedReplace('hello')('hi', 'hello world') // 'hi world'\n * const curriedReplace('hello')('hi')('hello world') // 'hi world'\n * ```\n *\n * @beta\n */\nconst curry = <T extends unknown[], R>(\n  fn: (...args: T) => R,\n): T[\"length\"] extends 0 ? () => R : Curried<T, R> => {\n  const curried: any = (...t: T) =>\n    t.length >= fn.length ? fn(...t) : curried.bind(null, ...t);\n\n  return curried;\n};\n\nexport { curry };\nexport type { Pop, Shift, UnionFactorial };\n"],"names":["fn","curried","t","length","bind"],"mappings":";kFAuHEA,UAEMC,EAAe,IAAIC,IACvBA,EAAEC,QAAUH,EAAGG,OAASH,KAAME,GAAKD,EAAQG,KAAK,QAASF,UAEpDD"}